{"version":3,"sources":["index.js"],"names":["partition","arr","len","reduce","base","el","length","slice","groupArray","x","makeSet","b","find","el2","range","start","end","step","chessboard","sanRegExp","pgnTagLineRegExp","defaultFen","sicilianFen","scandinavianFen","oddFrenchFen","mateLocoFen","mateAyudadoFen","prePastorFen","pastorFen","preWCastlingFen","preBCastlingFen","simpleFen","simpleRookMate","simpleRookCheck","complexRookMate","testFen1","testFen2","fen2obj","fen","split","fenString","turn","castling","enPassant","halfMoveClock","fullMoveNumber","fenArray","fen2array","obj2fen","fenObj","values","join","expandFen","replace","d","repeat","parseInt","compressFen","z","toString","test","map","_","i","self","defaultFenArray","array2fenString","v","computedFenString","sq2san","sq","String","fromCharCode","col","row","san2sq","san","rowcol2sq","charCodeAt","sqNumber","isNaN","Math","floor","col2letter","c","letter2col","l","sq2rowcol","r","isBlackFigure","fig","isWhiteFigure","isEmptyFigure","isDarkSquare","constructor","name","isLightSquare","difRow","sq1","sq2","abs","difCol","isSameRow","isSameCol","isDiagonal","isAntiDiagonal","isKnightJump","isKingReach","rowStep","colStep","diagStep","antiDiagStep","path","innerPath","pth","isForward","sqFrom","sqTo","arrayFromFen","kingSq","colour","findIndex","isClearPath","fenArr","iPath","isBishopMove","isRookMove","isQueenMove","isKingMove","isPawnMove","toLowerCase","isPawnAttack","isCastling","army","ret","bPawns","bKnights","bBishops","bBishopsL","filter","bBishopsD","bRooks","bQueens","bKings","wPawns","wKnights","wBishops","wBishopsL","wBishopsD","wRooks","wQueens","wKings","wArmy","bArmy","wAttackers","bAttackers","wAttacks","a","attacksFromSq","a1","a2","concat","bAttacks","wPMoves","p","n","canMove","bPMoves","isFriend","fig1","fig2","isFoe","getFigure","getFigures","obj","el1","filterFunc","candidatesArr","attacksOnSq","s","some","s2","checksTo","foe","isCheck","isCheckMate","availableMoves","isStaleMate","isCheckMateOld","friend","kSq","cands","candidateMoves","kingMoves","it","checks","remaining","checkPath","filtered","duo","pair","newFen","tryMove","validateFen","valid","canKingMove","king","pathToCheck","sanSqTo","figOrigen","figDestino","retArr","item","from","to","code","message","promotion","figFrom","figTo","newArray","toUpperCase","stripSan","san2args","fenobj","colOrig","extraInfo","rowOrColFunc","geoInfo","candids","reals","newfen","args2san","figure","extrainfo","capture","destiny","promotionFigure","check","attacks","fig_from_attacks","valids","otherfen","makeFenComparable","clear","fill","insuficientMaterial","color","frPawns","frKnights","frBishopsD","frBishopsL","frRooks","frQueens","foePawns","foeKnights","foeBishopsD","foeBishopsL","foeRooks","Chess","reset","Error","__fens__","__sans__","fennum","flipped","separ","fens","rows","bottomLine","showArray","asciiArray","subArr","moveArgs","result","match","moveStr","newSanObj","piece","captured","isEnPassant","isBigPawn","isPromotion","flags","setTimeout","options","verbose","splice","current","groups","in_fifty_moves_rule","in_threefold_repetition","insufficient_material","in_draw","thisExports","cf","window","global","module","exports","e","console","log"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["\"use strict\";\n\nconst partition = (arr, len) => arr.reduce((base, el) => \n    base[base.length -1].length < len ? [...base.slice(0, -1), [...base[base.length -1], el]] : \n                                        [...base, [el]] , [[]])\n\nconst groupArray = arr => {\n    return arr.reduce((base, x) => {\n        if (x in base) {\n            base[x] += 1\n        } else {\n            base[x] = 1\n        }\n        return base\n    }, {})\n}\n\nconst makeSet = arr => arr.reduce((b, el) => b.find(el2 => el2 === el) ? b : [...b, el], [])\n\nconst range = (start = 0, end = 9, step = 1) => {\n    if (start === end) {\n        return [start]\n    }\n\n    if (!step) {\n        if (start < end) {\n            step = 1\n        } else {\n            step = -1\n        }\n    }\n\n    if (start > end && step > 0) {\n        return []\n    }\n\n    if (start < end && step < 0) {\n        return []\n    }\n\n    return [start, ...range(start + step, end, step)]\n}\n\nconst chessboard = range(0, 63)\n\nconst sanRegExp = /(?:(^0-0-0|^O-O-O)|(^0-0|^O-O)|(?:^([a-h])(?:([1-8])|(?:x([a-h][1-8])))(?:=?([NBRQ]))?)|(?:^([NBRQK])([a-h])?([1-8])?(x)?([a-h][1-8])))(?:(\\+)|(#)|(\\+\\+))?$/\nconst pgnTagLineRegExp = /^\\s*\\[\\s*(.+?)\\s+\"(.+?)\"\\s*\\]\\s*$/\n\nconst defaultFen = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\nconst sicilianFen = 'rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 1'\nconst scandinavianFen = 'rnbqkbnr/ppp1pppp/8/3p4/4P3/8/PPPP1PPP/RNBQKBNR w KQkq d6 0 2'\nconst oddFrenchFen = 'rnbqkbnr/ppp2ppp/4p3/3pP3/8/8/PPPP1PPP/RNBQKBNR w KQkq d6 0 3'\nconst mateLocoFen = 'rnb1kbnr/pppp1ppp/8/4p3/6Pq/5P2/PPPPP2P/RNBQKBNR w KQkq - 1 3'\nconst mateAyudadoFen = 'r1bqnNnr/pppkpp1p/7R/3p4/8/8/PPPPPPP1/RNBQKBN1 b Q - 0 6'\nconst prePastorFen = 'r1bqkb1r/pppp1ppp/2n2n2/4p2Q/2B1P3/8/PPPP1PPP/RNB1K1NR w KQkq - 4 4'\nconst pastorFen = 'r1bqkb1r/pppp1Qpp/2n2n2/4p3/2B1P3/8/PPPP1PPP/RNB1K1NR b KQkq - 0 4'\nconst preWCastlingFen = 'rnbqk2r/pppp1ppp/5n2/2b1p3/2B1P3/5N2/PPPP1PPP/RNBQK2R w KQkq - 4 4'\nconst preBCastlingFen = 'rnbqk2r/pppp1ppp/5n2/2b1p3/2B1P3/5N2/PPPP1PPP/RNBQ1RK1 b kq - 5 4'\nconst simpleFen = '7k/7P/7K/8/8/8/8/8 w - - 0 1'\nconst simpleRookMate = 'R6k/6pp/8/8/3n4/8/8/7K b - - 0 1'\nconst simpleRookCheck = 'R6k/6pp/8/8/3r4/8/8/7K b - - 0 1'\nconst complexRookMate = 'R6k/6qp/5B2/8/8/8/8/7K b - - 0 1'\nconst testFen1 = '8/6B1/6p1/R6k/7p/8/8/K5R1 b KQkq - 0 1'\nconst testFen2 = '8/5BB1/6p1/R6k/7p/8/8/K5R1 b KQkq - 0 1'\n\nconst fen2obj = fen => {\n    const arr = fen.split(/\\s+/)\n    return {\n        fenString: arr[0],\n        turn: arr[1],\n        castling: arr[2],\n        enPassant: arr[3],\n        halfMoveClock: arr[4],\n        fullMoveNumber: arr[5],\n        fenArray: fen2array(arr[0])\n    }\n}\n\nconst obj2fen = fenObj => {\n    delete fenObj.fenArray\n    return values(fenObj).join(' ')\n}\n\nconst expandFen = fen => fen.replace(/\\//g, '').replace(/[1-8]/g, d => ('0').repeat(parseInt(d)))\n\nconst compressFen = fen => fen.replace(/(.{8})(?!$)/g, \"$1/\").replace(/0+/g, z => z.length.toString())\n\nconst fen2array = fen => {\n    if (/^(.+\\/){7}.+$/.test(fen)) {\n        fen = expandFen(fen)\n    } else if (fen.length !== 64) {\n        return []\n    }\n    return fen.split('').map((_, i, self) => self[i ^ 56])\n}\n\nconst defaultFenArray = fen2array(fen2obj(defaultFen).fenString)\n\nconst array2fenString = arr => compressFen(arr.map((v, i) => arr[i ^56]).join(''))\n\nconst computedFenString = array2fenString(defaultFenArray)\n\nconst sq2san = sq => sq >= 0 && sq < 64 ? \n                     `${String.fromCharCode(97 + col(sq))}${String.fromCharCode(49 + row(sq))}` :\n                     '-'\n\nconst san2sq = san => /[a-h][1-8]/.test(san) ? \n                      rowcol2sq(san.charCodeAt(1) -49, san.charCodeAt(0) - 97) :\n                      -1\n\nconst sqNumber = sq => isNaN(sq) ? san2sq(sq) : parseInt(sq)\n\nconst row = sq => Math.floor(sqNumber(sq) / 8)\n\nconst col = sq => sqNumber(sq) % 8\n\nconst col2letter = c => String.fromCharCode(97 + c)\n\nconst letter2col = l => l.charCodeAt(0) - 97\n\nconst sq2rowcol = sq => ({row: row(sq), col: col(sq)})\n\nconst rowcol2sq = (r, c) => r * 8 + c\n\nconst isBlackFigure = fig => /[pnbrqk]/.test(fig)\n\nconst isWhiteFigure = fig => /[PNBRQK]/.test(fig)\n\nconst isEmptyFigure = fig => fig === '0'\n\nconst isDarkSquare = sq => {\n    if (sq.constructor.name === 'String') {\n        sq = san2sq(sq)\n    }\n    return (row(sq) % 2 === 0 && col(sq) % 2 === 0) || (row(sq) % 2 !== 0 && col(sq) % 2 !== 0)\n}\n\nconst isLightSquare = sq => !isDarkSquare(sq)\n\nconst difRow = (sq1, sq2) => Math.abs(row(sq1) - row(sq2))\n\nconst difCol = (sq1, sq2) => Math.abs(col(sq1) - col(sq2))\n\nconst isSameRow = (sq1, sq2) => difRow(sq1, sq2) === 0\n\nconst isSameCol = (sq1, sq2) => difCol(sq1, sq2) === 0\n\nconst isDiagonal = (sq1, sq2) => difCol(sq1, sq2) === difRow(sq1, sq2)\n\nconst isAntiDiagonal = (sq1, sq2) => difCol(sq1, sq2) === difRow(sq1, sq2) && \n                                     Math.abs(sqNumber(sq1) - sqNumber(sq2)) % 7 === 0 &&\n                                     sqNumber(sq1) !== 63 &&\n                                     sqNumber(sq2) !== 63\n\nconst isKnightJump = (sq1, sq2) => (difCol(sq1, sq2) === 2  && difRow(sq1, sq2) === 1) ||\n                                   (difCol(sq1, sq2) === 1  && difRow(sq1, sq2) === 2) \n\nconst isKingReach = (sq1, sq2) => difCol(sq1, sq2) < 2 && difRow(sq1, sq2) < 2\n\nconst rowStep = 1\nconst colStep = 8\nconst diagStep = 9\nconst antiDiagStep = 7\n\nconst path = (sq1, sq2) => {\n    let step\n    if (sq1 === sq2) {\n        return [sqNumber(sq1)]\n    } else if (isSameCol(sq1, sq2)) {\n        if (sqNumber(sq1) < sqNumber(sq2)) {\n            step = colStep\n        } else {\n            step = -colStep\n        }\n    } else if (isSameRow(sq1, sq2)) {\n        if (sqNumber(sq1) < sqNumber(sq2)) {\n            step = rowStep\n        } else {\n            step = -rowStep\n        }\n    } else if (isAntiDiagonal(sq1, sq2)) {\n        if (sqNumber(sq1) < sqNumber(sq2)) {\n            step = antiDiagStep\n        } else {\n            step = -antiDiagStep\n        }\n    } else if (isDiagonal(sq1, sq2)) {\n        if (sqNumber(sq1) < sqNumber(sq2)) {\n            step = diagStep\n        } else {\n            step = -diagStep\n        }\n    } else if (isKnightJump(sq1, sq2)) {\n        return [sqNumber(sq1), sqNumber(sq2)]\n    } else {\n        return []\n    }\n    return range(sqNumber(sq1), sqNumber(sq2), step)\n}\n\nconst innerPath = pth => pth.slice(1, -1)\n\nconst isForward = (fig, sqFrom, sqTo) => isBlackFigure(fig) ? \n                  row(sqFrom) > row(sqTo) : \n                  row(sqFrom) < row(sqTo)\n\nconst arrayFromFen = fen => {\n    if (fen.constructor.name === 'Array') {\n        return fen\n    } else if (!(fen.constructor.name === 'String')) {\n        return []\n    } else {\n        if (/\\s+/.test(fen)) {\n            return fen2obj(fen).fenArray\n        } else {\n            return fen2array(fen)\n        }\n    }\n}\n\nconst kingSq = (fen, colour) => arrayFromFen(fen).findIndex( x => x === (/[a-z]/.test(colour) && colour !== 'w' ? 'k' : 'K'))\n\nconst isClearPath = (fen, pth) => {\n    if  (pth.length < 3) {\n        return true\n    }\n\n    const fenArr = arrayFromFen(fen)\n    const iPath = innerPath(pth)\n\n    for (let v of iPath) {\n        if (fenArr[v] !== '0') {\n            return false\n        }\n    }\n\n    return true\n}\n\nconst isBishopMove = (sqFrom, sqTo) => isDiagonal(sqFrom, sqTo) && sqFrom !== sqTo\n\nconst isRookMove = (sqFrom, sqTo) => (isSameRow(sqFrom, sqTo) || isSameCol(sqFrom, sqTo)) && sqFrom !== sqTo\n\nconst isQueenMove = (sqFrom, sqTo) => (isBishopMove(sqFrom, sqTo) || isRookMove(sqFrom, sqTo)) && sqFrom !== sqTo\n\nconst isKingMove = (sqFrom, sqTo) => difRow(sqNumber(sqFrom), sqNumber(sqTo)) < 2 &&  \n                                     difCol(sqNumber(sqFrom), sqNumber(sqTo)) < 2 &&\n                                     sqFrom !== sqTo\n\nconst isPawnMove = (sqFrom, sqTo, colour = 'w') => {\n    colour = colour.toLowerCase()\n    if (!/[wb]/.test(colour)) {\n        return false\n    }\n    const fig = colour === 'w' ? 'P' : 'p'\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    if (!isForward(fig, sqFrom, sqTo)) {\n        return 0\n    }\n\n    if (fig === 'P') {\n        if (sqTo === (sqFrom + 8)) return 1\n        if (sqTo === (sqFrom + 16) && row(sqFrom) === 1) return 2\n        return 0\n    } else {\n        if (sqTo === (sqFrom - 8)) return 1\n        if (sqTo === (sqFrom - 16) && row(sqFrom) === 6) return 2\n        return 0\n    }\n}\n\nconst isPawnAttack = (sqFrom, sqTo, colour = 'w') => {\n    colour = colour.toLowerCase()\n    if (!/[wb]/.test(colour)) {\n        return false\n    }\n    const fig = colour === 'w' ? 'P' : 'p'\n    if (!isForward(fig, sqFrom, sqTo)) {\n        return false\n    }\n    if (difCol(sqFrom, sqTo) !== 1) return false\n    if (difRow(sqFrom, sqTo) !== 1) return false\n    return true\n}\n\nconst isCastling = (sqFrom, sqTo, colour = 'w') => {\n    colour = colour.toLowerCase()\n    if (!/[wb]/.test(colour)) {\n        return false\n    }\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    if (colour === 'w') {\n        return sqFrom === 4 && (sqTo === 2 || sqTo === 6)\n    } else {\n        return sqFrom === 60 && (sqTo === 58 || sqTo === 62)\n    }\n}\n\nconst army = (fen, fig) => {\n    const fenArr = fen2array(fen)\n    let ret = []\n    for (let v of chessboard) {\n        if (fenArr[v] === fig) {\n            ret = [...ret, v]\n        }\n    }\n    return ret\n}\n\nconst bPawns = fen => army(fen, 'p')\nconst bKnights = fen => army(fen, 'n')\nconst bBishops = fen => army(fen, 'b')\nconst bBishopsL = fen => army(fen, 'b').filter(sq => isLightSquare(sq))\nconst bBishopsD = fen => army(fen, 'b').filter(sq => isDarkSquare(sq))\nconst bRooks = fen => army(fen, 'r')\nconst bQueens = fen => army(fen, 'q')\nconst bKings = fen => army(fen, 'k')\n\nconst wPawns = fen => army(fen, 'P')\nconst wKnights = fen => army(fen, 'N')\nconst wBishops = fen => army(fen, 'B')\nconst wBishopsL = fen => army(fen, 'B').filter(sq => isLightSquare(sq))\nconst wBishopsD = fen => army(fen, 'B').filter(sq => isDarkSquare(sq))\nconst wRooks = fen => army(fen, 'R')\nconst wQueens = fen => army(fen, 'Q')\nconst wKings = fen => army(fen, 'K')\n\nconst wArmy = fen => [\n    ...wPawns(fen), \n    ...wKnights(fen), \n    ...wBishops(fen),\n    ...wRooks(fen),\n    ...wQueens(fen),\n    ...wKings(fen),\n]\n\nconst bArmy = fen => [\n    ...bPawns(fen), \n    ...bKnights(fen), \n    ...bBishops(fen),\n    ...bRooks(fen),\n    ...bQueens(fen),\n    ...bKings(fen),\n]\n\nconst wAttackers = fen => [\n    ...wKnights(fen), \n    ...wBishops(fen),\n    ...wRooks(fen),\n    ...wQueens(fen),\n]\n\nconst bAttackers = fen => [\n    ...bKnights(fen), \n    ...bBishops(fen),\n    ...bRooks(fen),\n    ...bQueens(fen),\n]\n\nconst wAttacks = fen => wAttackers(fen).map(a => attacksFromSq(fen, a)).reduce((a1, a2) => a1.concat(a2), [])\nconst bAttacks = fen => bAttackers(fen).map(a => attacksFromSq(fen, a)).reduce((a1, a2) => a1.concat(a2), [])\n\nconst wPMoves = fen => wPawns(fen).map(p => chessboard.filter(n => canMove(fen, p, n)))\n                       .reduce((a1, a2) => a1.concat(a2))   \n\nconst bPMoves = fen => bPawns(fen).map(p => chessboard.filter(n => canMove(fen, p, n)))\n                       .reduce((a1, a2) => a1.concat(a2))   \n\nconst isFriend = (fig1, fig2) => (isBlackFigure(fig1) && isBlackFigure(fig2)) || (isWhiteFigure(fig1) && isWhiteFigure(fig2))\nconst isFoe = (fig1, fig2) => (isBlackFigure(fig1) && isWhiteFigure(fig2)) || (isWhiteFigure(fig1) && isBlackFigure(fig2))\n\nconst getFigure = (fen, sq) => arrayFromFen(fen)[sqNumber(sq)]\n\nconst getFigures = (fen, path) => path.map( n => {\n    const obj = {}\n    obj[n] = getFigure(fen, n)\n    return obj\n}).reduce((el1, el2) => ({...el1, ...el2}), {})\n\nconst attacksFromSq = (fen, sq) => {\n    const fenArr = arrayFromFen(fen)\n    sq = sqNumber(sq)\n    const fig = fenArr[sq]\n    if (isEmptyFigure(fig)) return []\n    let filterFunc\n\n    switch (fig.toLowerCase()) {\n        case 'n':\n            filterFunc = isKnightJump\n            break\n        case 'b':\n            filterFunc = isBishopMove\n            break\n        case 'r':\n            filterFunc = isRookMove\n            break\n        case 'q':\n            filterFunc = isQueenMove\n            break\n        case 'k':\n            filterFunc = isKingMove\n            break\n        default: \n            return fig === 'p' ? [sq - 7, sq - 9] : [sq + 7, sq + 9]\n        }\n\n        const candidatesArr = chessboard.filter( n => filterFunc(sq, n))\n\n        return candidatesArr.filter(n => isClearPath(fenArr, path(sq, n)))\n}\n\nconst attacksOnSq = (fen, sq, colour = 'w') => {\n    colour = colour.toLowerCase()\n    if (!/[wb]/.test(colour)) {\n        return null\n    }\n\n    sq = sqNumber(sq)\n\n    const army = colour === 'w' ? wArmy(fen) : bArmy(fen)\n    // console.log(\"Army:\\n\", army)\n\n    return army.filter(s => attacksFromSq(fen, s).some(s2 => s2 === sq))\n}\n\nconst checksTo = (fen, colour = 'w') => {\n    const foe = colour.toLowerCase() === 'w' ? 'b' : 'w'\n    return attacksOnSq(fen, kingSq(fen, colour.toLowerCase()), foe)\n}\n\nconst isCheck = fen => checksTo(fen, fen2obj(fen).turn).length > 0\n\nconst isCheckMate = fen => isCheck(fen) && availableMoves(fen).length === 0\n\nconst isStaleMate = fen => !isCheck(fen) && availableMoves(fen).length === 0\n\nconst isCheckMateOld = fen => {\n    if (!isCheck(fen)) return false\n    const { turn } = fen2obj(fen)\n    const [friend, foe, kSq] = turn === 'w' ? ['w', 'b', kingSq(fen, 'w')] : ['b', 'w', kingSq(fen, 'b')]\n    const cands = candidateMoves(fen)\n    //console.log(`Candidates: ${JSON.stringify(cands)}`)\n    const kingMoves = cands.find(it => it[0] === kSq)[1]\n    if (kingMoves.length > 0) return false\n    const checks = checksTo(fen, friend)\n    if (checks.length > 1) return true\n    const remaining = cands.filter(it => it[0] !== kSq)\n    //console.log(`Remaining moves: ${JSON.stringify(remaining)}`)\n    const  checkPath = path(checks[0], kSq).filter(n => n !== kSq)\n    //console.log(`Check path: ${JSON.stringify(checkPath)}`)\n    const filtered = remaining.filter( duo => duo[1].some(n => checkPath.find(pth => pth === n)))\n    //console.log(`Filtered: ${JSON.stringify(filtered)}`)\n    if (filtered.length > 0) {\n        for (let pair of filtered) {\n            const newPair = [pair[0], pair[1].filter(v => checkPath.find(n => n === v))]\n            //console.log(`New Pair: ${JSON.stringify(newPair)}`)\n            for (let v of pair[1]) {\n                //console.log(`pair[0]: ${pair[0]} , v: ${v}`)\n                const newFen = tryMove(fen, pair[0], v, 'Q')\n                //console.log(`newFen: ${newFen}`)\n                if (newFen && validateFen(newFen).valid) return false\n            }\n        }\n    }\n\n    return true\n}\n\nconst canKingMove = (fen, sqFrom, sqTo, king) => {\n    const {castling, turn, fenArray} = fen2obj(fen)\n    const friend = king === 'k' ? 'b' : 'w'\n    const foe = king === 'k' ? 'w' : 'b'\n\n    //console.log(`Castling: ${castling}, turn: ${turn}, friend: ${friend}, foe: ${foe}`)\n    if(isKingMove(sqFrom, sqTo)) {\n        return attacksOnSq(fen, sqTo, foe).length === 0\n    } else if (isCastling(sqFrom, sqTo, friend)) {\n        //console.log(`IsCastling: ${sqFrom}, ${sqTo}`)\n        if (!isEmptyFigure(fenArray[sqTo])) {\n            //console.log('Aledgely square ', sqTo, ' is not empty')\n            return false\n        }\n        let pathToCheck\n        switch (sqTo) {\n            case 6:\n                if (!/K/.test(castling)) return false\n                pathToCheck = path(4, 6)\n                break\n            case 2:\n                if (!/Q/.test(castling)) return false\n                pathToCheck = path(4, 2)\n                break\n            case 62:\n                if (!/k/.test(castling)) return false\n                pathToCheck = path(60, 62)\n                break\n            case 58:\n                if (!/q/.test(castling)) return false\n                pathToCheck = path(60, 58)\n                break\n            default:\n                return false\n        }\n        //console.log(\"!pathToCheck.map(s => attacksOnSq(fen, s, foe)).some(a => a.length > 0)\",\n        !pathToCheck.map(s => attacksOnSq(fen, s, foe)).some(a => a.length > 0)\n        return !pathToCheck.map(s => attacksOnSq(fen, s, foe)).some(a => a.length > 0)\n    } else {\n        return false\n    }\n}\n\n\nconst canMove = (fen, sqFrom, sqTo) => {\n    if (path(sqFrom, sqTo).length < 2 ) {\n        return false\n    }\n    if (!isClearPath(fen, path(sqFrom, sqTo))) {\n        return false\n    }\n\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    const sanSqTo = sq2san(sqTo)\n    const fenObj = fen2obj(fen)\n    const {fenArray, enPassant} = fenObj\n    const figOrigen = fenArray[sqFrom]\n\n    if (figOrigen === '0') {\n        return false\n    }\n\n    const figDestino = fenArray[sqTo]\n\n    if (isFriend(figOrigen, figDestino)) {\n        return false\n    }\n\n    switch(figOrigen) {\n        case 'p':\n            //console.log(`Testing move from ${sqFrom} to ${sqTo} for black pawn`)\n            if (isPawnMove(sqFrom, sqTo, 'b') && !isEmptyFigure(figDestino)) return false\n            if (isPawnAttack(sqFrom, sqTo, 'b') && !isWhiteFigure(figDestino) && sanSqTo !== enPassant) return false\n            if (!isPawnMove(sqFrom, sqTo, 'b') && !isPawnAttack(sqFrom, sqTo, 'b')) return false\n            break\n        case 'P':\n            //console.log(`Testing move from ${sqFrom} to ${sqTo} for white pawn`)\n            if (isPawnMove(sqFrom, sqTo, 'w') && !isEmptyFigure(figDestino)) return false\n            if (isPawnAttack(sqFrom, sqTo, 'w') && !isBlackFigure(figDestino) && sanSqTo !== enPassant) return false\n            if (!isPawnMove(sqFrom, sqTo, 'w') && !isPawnAttack(sqFrom, sqTo, 'w')) return false\n            break\n        case 'K':\n        case 'k':\n            return canKingMove(fen, sqFrom, sqTo, figOrigen)\n            break\n        case 'q':\n        case 'Q':\n            if (!isQueenMove(sqFrom, sqTo)) return false\n            break\n        case 'r':\n        case 'R':\n            if (!isRookMove(sqFrom, sqTo)) return false\n            break\n        case 'b':\n        case 'B':\n            if (!isBishopMove(sqFrom, sqTo)) return false\n            break\n        case 'n':\n        case 'N':\n            if (!isKnightJump(sqFrom, sqTo)) return false\n            break\n        default:\n            return false\n    }\n\n    return true\n}\n \nconst candidateMoves = fen => {\n  const {fenArray, turn, castling, enPassant} = fen2obj(fen)\n  const army = turn === 'w' ? wArmy(fen) : bArmy(fen)\n  return army.map(sq => [sq, chessboard.filter(n => canMove(fen, sq, n))])\n}\n\nconst availableMoves = fen => {\n    let retArr = []\n    for (let item of candidateMoves(fen)) {\n        for (let sq of item[1]) {\n            const newFen = tryMove(fen, item[0], sq, 'Q')\n            if (newFen && validateFen(newFen).valid) retArr = [...retArr, {from: item[0], to: sq}]\n        }\n    }\n    return retArr\n}\n\nconst validateFen = fen => {\n    const {fenArray, turn} = fen2obj(fen)\n    if (fenArray.filter(fig => fig === 'k').length !== 1) {\n        return {valid: false, code: 2, message: 'There must be one and only one black king'}\n    }\n    if (fenArray.filter(fig => fig === 'K').length !== 1) {\n        return {valid: false, code: 3, message: 'There must be one and only one white king'}\n    }\n    if (checksTo(fen, turn === 'w' ? 'b' : 'w').length > 0) {\n        return {valid: false, code: 1, message: `The ${turn === 'b' ? 'white' : 'black'} side is in check, while it's not its turn to move`}\n    }\n    return {valid: true, code: 0, message: 'OK'}\n}\n\nconst tryMove = (fen, sqFrom, sqTo, promotion = 'Q') => {\n    if (!fen || fen.constructor.name !== 'String') return false\n    if (!canMove(fen, sqFrom, sqTo)) return false\n    let {fenArray, turn, castling, enPassant, halfMoveClock, fullMoveNumber} = fen2obj(fen)\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    const [figFrom, figTo] = [fenArray[sqFrom], fenArray[sqTo]]\n    let newArray = [...fenArray]\n\n    newArray[sqFrom] = '0'\n    if (figFrom === 'P' && row(sqTo) === 7) {\n        newArray[sqTo] = promotion ? promotion.toUpperCase() : 'Q'\n    } else if (figFrom === 'p' && row(sqTo) === 0) {\n        newArray[sqTo] = promotion ? promotion.toLowerCase() : 'q'\n    } else {\n        newArray[sqTo] = figFrom\n    }\n    if (figFrom === 'P' && sq2san(sqTo) === enPassant) {\n        newArray[sqTo - 8] = '0'\n    } else if (figFrom === 'p' && sq2san(sqTo) === enPassant) {\n        newArray[sqTo + 8] = '0'\n    }\n\n    if (figFrom === 'K' && sqFrom === 4 && sqTo === 6) {\n        newArray[5] = 'R'\n        newArray[7] = '0'\n    } else if (figFrom === 'K' && sqFrom === 4 && sqTo === 2) {\n        newArray[3] = 'R'\n        newArray[0] = '0'\n    } else if (figFrom === 'k' && sqFrom === 60 && sqTo === 62) {\n        newArray[61] = 'r'\n        newArray[63] = '0'\n    } else if (figFrom === 'k' && sqFrom === 60 && sqTo === 58) {\n        newArray[59] = 'r'\n        newArray[56] = '0'\n    }   \n\n    if (sqFrom === 4) castling = castling.replace('K', '').replace('Q', '')\n    if (sqFrom === 60) castling = castling.replace('k', '').replace('q', '')\n\n    if (sqFrom === 7) castling = castling.replace('K', '')\n    if (sqFrom === 0) castling = castling.replace('Q', '')\n\n    if (sqFrom === 63) castling = castling.replace('k', '')\n    if (sqFrom === 56) castling = castling.replace('q', '')\n\n    if (castling === '') castling = '-'\n\n    turn = turn === 'w' ? 'b' : 'w'\n\n    if (figFrom === 'P' && isPawnMove(sqFrom, sqTo, 'w') === 2) {\n        enPassant = sq2san(sqTo - 8)\n    } else if (figFrom === 'p' && isPawnMove(sqFrom, sqTo, 'b') === 2) {\n        enPassant = sq2san(sqTo + 8)\n    } else {\n        enPassant = '-'\n    }\n\n    if (figFrom !== 'P' && figFrom !== 'p' && figTo === '0') {\n        halfMoveClock = parseInt(halfMoveClock) + 1\n    } else {\n        halfMoveClock = '0'\n    }\n\n    fullMoveNumber = turn === 'w' ? parseInt(fullMoveNumber) + 1 : fullMoveNumber\n\n    const fenString = array2fenString(newArray)\n\n    return `${fenString} ${turn} ${castling} ${enPassant} ${halfMoveClock} ${fullMoveNumber}`\n}\n\nconst stripSan = san => san.replace(/[+#=x]/g, '')\n\nconst san2args = (fen, san) => {\n    const fenobj = fen2obj(fen)\n    \n    san = stripSan(san)\n    if (san === '0-0' || san === 'O-O') {\n        if (fenobj.turn === 'w') {\n            return {sqFrom: 4, sqTo: 6, promotion: null}\n        } else {\n            return {sqFrom: 60, sqTo: 62, promotion: null}\n        }\n    }\n\n    if (san === '0-0-0' || san === 'O-O-O') {\n        if (fenobj.turn === 'w') {\n            return {sqFrom: 4, sqTo: 2, promotion: null}\n        } else {\n            return {sqFrom: 60, sqTo: 58, promotion: null}\n        }\n    }\n\n    let sqFrom, sqTo, promotion, army\n\n    if (/[a-h]/.test(san[0])) {\n        const colOrig = letter2col(san[0])\n        if (/[1-8]/.test(san[1])) {\n           sqTo = sqNumber(san.slice(0, 2))\n        } else {\n           sqTo = sqNumber(san.slice(1, 3))\n        }\n        army = fenobj.turn === 'w' ? wPawns(fen) : bPawns(fen) \n        sqFrom = army.find(n => col(n) === colOrig && canMove(fen, n, sqTo)) || -1\n        if (/[QNRBqnrb]/.test(san[san.length - 1])) {\n            promotion = san[san.length - 1]\n        } else {\n            promotion = null\n        }\n        return {sqFrom, sqTo, promotion}\n    } else if (isWhiteFigure(san[0]) && san[0] !== 'P') {\n        promotion = null\n        const fig = san[0]\n        switch (fig) {\n            case 'N':\n                army = fenobj.turn === 'w' ? wKnights(fen) : bKnights(fen)\n                break\n            case 'B':\n                army = fenobj.turn === 'w' ? wBishops(fen) : bBishops(fen)\n                break\n            case 'R':\n                army = fenobj.turn === 'w' ? wRooks(fen) : bRooks(fen)\n                break\n            case 'Q':\n                army = fenobj.turn === 'w' ? wQueens(fen) : bQueens(fen)\n                break\n            case 'K':\n                army = fenobj.turn === 'w' ? wKings(fen) : bKings(fen)\n                break\n            }\n        sqTo = san2sq(san.slice(san.length - 2, san.length))\n        if (san.length === 5) {\n            //console.log('san length 5')\n            sqFrom = san2sq(san.slice(1, 3))\n        } else if (san.length === 4) {\n          //console.log('san length 4')\n          const extraInfo = san[1]\n          const [rowOrColFunc, geoInfo] = /[1-8]/.test(extraInfo) ? \n                                          [row, parseInt(extraInfo) - 1] : \n                                          [col, letter2col(extraInfo)]\n          sqFrom = army.find(n => rowOrColFunc(n) === geoInfo && canMove(fen, n, sqTo)) || -1\n        } else {\n            const candids = army.filter(n => canMove(fen, n, sqTo))\n            switch (candids.length) {\n                case 0:\n                    //console.log('0 candidates')\n                    sqFrom = -1\n                    break\n                case 1:\n                    //console.log('1 candidato: ' + candids[0])\n                    sqFrom = candids[0]\n                    break\n                default:\n                    const reals = candids.filter(sq => {\n                        const newfen = tryMove(fen, sq, sqTo, null)\n                        return newfen && validateFen(newfen).valid\n                    })\n                    // console.log(\"Hay \" + reals.length + \" jugada/s para elegir\")\n                    //console.log('Reals: ' + JSON.stringify(reals))\n                    sqFrom  = reals.length === 1 ? reals[0] : -1              \n            } \n        }\n        return {sqFrom, sqTo, promotion}\n    } else {\n        //console.log('Llegamos al final sin saber que pasó')\n        return {sqFrom: -1, sqTo: -1, promotion: null}\n    }\n}\n\nconst args2san = (fen, sqFrom, sqTo, promotion) => {\n    const {fenArray, turn, enPassant, castling} = fen2obj(fen)\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    const [figFrom, figTo] = [fenArray[sqFrom], fenArray[sqTo]]\n    if (isEmptyFigure(figFrom)) return null\n\n    let figure, extrainfo, capture, destiny, promotionFigure, check\n\n    const newfen = tryMove(fen, sqFrom, sqTo, promotion)\n    if (!(newfen && validateFen(newfen).valid)) return null\n\n    if (isCheckMate(newfen)) {\n        check = '#'\n    } else if (isCheck(newfen)) {\n        check = '+'\n    } else {\n        check = ''\n    }\n\n    if (figFrom === 'K' && sqFrom === 4) {\n        if (sqTo === 6) return `O-O${check}`\n        if (sqTo === 2) return `O-O-O${check}`\n    }\n\n    if (figFrom === 'k' && sqFrom === 60) {\n        if (sqTo === 62) return `O-O${check}`\n        if (sqTo === 58) return `O-O-O${check}`\n    }\n    \n    \n    capture = !isEmptyFigure(figTo) ? 'x' : \n              /[Pp]/.test(figFrom) && sqNumber(enPassant) === sqTo ? 'x' : ''\n    destiny = sq2san(sqTo)\n\n    if (/[Pp]/.test(figFrom)) {\n        figure =  isSameCol(sqFrom, sqTo) ?  '' : col2letter(col(sqFrom))\n        extrainfo = ''\n        if ((row(sqTo) === 7 && figFrom === 'P') || \n           (row(sqTo) === 7 && figFrom === 'P')) {\n            promotionFigure = `=${promotion ? promotion.toUpperCase() : 'Q'}`\n        } else {\n            promotionFigure = ''\n        }\n    } else {\n        figure = figFrom.toUpperCase()\n        promotionFigure = ''\n        const attacks = attacksOnSq(fen, sqTo, turn)\n        const fig_from_attacks = attacks.filter( sq => fenArray[sq] === figFrom && sq !== sqFrom)\n        if (fig_from_attacks.length === 0) {\n            extrainfo = ''\n        } else {\n            const valids = fig_from_attacks.filter(sq => {\n                const otherfen = tryMove(fen, sq, sqTo, null)\n                return otherfen && validateFen(otherfen).valid\n            })\n            if (valids.length > 1) {\n                extrainfo = sq2san(sqFrom)\n            } else if (valids.length === 1) {\n                if (isSameCol(sqFrom, valids[0])) {\n                    extrainfo = (row(sqFrom) + 1).toString()\n                } else {\n                    extrainfo = col2letter(col(sqFrom))\n                }\n            } else {\n                extrainfo = ''\n            }\n        }\n    }\n    \n    return `${figure}${extrainfo}${capture}${destiny}${promotionFigure}${check}`\n}\n\nconst makeFenComparable = fen => fen.split(/\\s+/).slice(0, 4).join(' ')\n\nconst clear = (fen) => {\n    const obj = fen2obj(fen)\n    obj.fenArray = range(0, 63).fill('0')\n    obj.fenString = array2fenString(obj.fenArray)\n    return obj2fen(obj)\n}\n\nconst insuficientMaterial = (fen, color = 'w') => {\n    if (!/^[wb]$/i.test(color)) return null\n    const [frPawns, frKnights, frBishopsD, frBishopsL, frRooks, frQueens, \n           foePawns, foeKnights, foeBishopsD, foeBishopsL, \n           foeRooks, foeQueens] = color.toLowerCase() === 'w' ? \n               [wPawns(fen), wKnights(fen), wBishopsD(fen), wBishopsL(fen), wRooks(fen),\n                wQueens(fen), bPawns(fen), bKnights(fen), bBishopsD(fen), bBishopsL(fen),\n                bRooks(fen), bQueens(fen) \n               ] :\n               [bPawns(fen), bKnights(fen), bBishopsD(fen), bBishopsL(fen), bRooks(fen),\n                bQueens(fen), wPawns(fen), wKnights(fen), wBishopsD(fen), wBishopsL(fen),\n                wRooks(fen), wQueens(fen) \n               ] \n    \n    if (frPawns.length || frRooks.length || frQueens.length) return false // Mate de torre, dama o pieza coronada\n\n    if (frBishopsD.length && frBishopsL.length) return false // Mate de 2 alfiles\n\n    if ((frBishopsD.length || frBishopsL.length)  && frKnights.length) return false // Mate de 2 alfil y caballo\n\n    if (frKnights.length > 1) return false // Mate de 2 o más caballos\n\n    /* Mates con material que por si mismo es insuficiente, \n       pero es \"ayudado\" por una pieza enemiga que ahoga */\n    if (frBishopsD.length) {\n        if (foePawns.length || foeKnights.length || foeBishopsL.length) return false\n    } else if (frBishopsL.length) {\n        if (foePawns.length || foeKnights.length || foeBishopsD.length) return false\n    } else if (frKnights.length) {\n        if (foePawns.length || foeKnights.length || \n            foeBishopsD.length || foeBishopsL.length ||\n            foeRooks.length) return false\n    }\n    /* Fin Mates con material que por si mismo es insuficiente, \n       pero es \"ayudado\" por una pieza enemiga que ahoga */\n    \n    return true\n}\n\nclass Chess {\n    constructor(fen = defaultFen) {\n        this.reset(fen)\n    }\n\n    reset(fen = defaultFen) {\n        const v = validateFen(fen)\n        if (!v.valid) throw new Error(v.message)\n        this.__fens__ = [fen]\n        this.__sans__ = ['']\n    }\n\n    load(fen) {\n        this.reset(fen)\n    }\n\n    ascii(fennum , flipped = false) {\n        const separ = `   +${'---+'.repeat(8)}\\n`\n        //const empty = `   ${'|   '.repeat(8)}|\\n`\n        const empty = ''\n        fennum = fennum || this.fens().length - 1\n        const { fenArray } = fen2obj(this.fens()[fennum])\n        const rows = (flipped ? range(0, 7) : range(7, 0, -1)).map(n => (n + 1).toString())\n        const cols = (flipped ? range(7, 0, -1) : range(0, 7)).map(n => String.fromCharCode(n + 97))\n        const bottomLine = cols.reduce((base, el) => base + '  ' + el + ' ', '   ') + ' \\n'\n        const showArray = fenArray.map((_, i, self) => self[i ^ (flipped ? 7 : 56)]).map(v => v === '0' ? ' ' : v)\n        const partArray = partition(showArray, 8)\n        const asciiArray = partArray.map((subArr, i) => subArr.reduce((base, el) => base + '| ' + el + ' ', empty + ` ${rows[i]} `) + '|\\n' + empty + separ)\n\n        return `${separ}${asciiArray.join('')}${bottomLine}`\n    }\n\n    clear() {\n        this.__fens__ = [...this.__fens__.slice(0, -1), clear(this.__fens__[this.__fens__.length -1])]\n        return this\n    }\n\n    move(...moveArgs) {\n        const fenObj = fen2obj(this.fen) \n        let sqFrom, sqTo, promotion\n        switch (moveArgs.length) {\n            case 0:\n                return false\n            case 1:\n                if (sanRegExp.test(moveArgs[0])) {\n                    const result = san2args(this.fen, moveArgs[0])\n                    sqFrom = result.sqFrom\n                    sqTo = result.sqTo\n                    promotion = result.promotion\n                } else if (/[a-h][1-8]-?[a-h][1-8][QRNBqrnb]?/.test(moveArgs[0])) {\n                    if (moveArgs[0][moveArgs[0].length - 1].match(/QRNB/i)) {\n                        promotion = moveArgs[0][moveArgs[0].length - 1].toUpperCase()\n                    } else {\n                        promotion = null\n                    }\n                    const moveStr = moveArgs[0].replace(/-/g, '')\n                    sqFrom = sqNumber(moveStr.slice(0,2))\n                    sqTo = sqNumber(moveStr.slice(2,4))\n                }\n                break\n            default:\n                sqFrom = sqNumber(moveArgs[0])\n                sqTo = sqNumber(moveArgs[1])\n                promotion = moveArgs[2]\n        }\n\n        if ((isWhiteFigure(fenObj.fenArray[sqFrom]) && fenObj.turn === 'b') || \n           (isBlackFigure(fenObj.fenArray[sqFrom]) && fenObj.turn === 'w')) return false\n\n        const newFen = tryMove(this.fen, sqFrom, sqTo, promotion)\n        if (!newFen) return false\n        if (!validateFen(newFen).valid) return false\n        const san = args2san(this.fen, sqFrom, sqTo, promotion)\n        const { fenArray, turn, enPassant } = fenObj\n        const [figFrom, figTo] = [fenArray[sqFrom], fenArray[sqTo]]\n        let newSanObj = {san, \n                         piece: figFrom, \n                         color: turn, \n                         from: sq2san(sqFrom), \n                         to: sq2san(sqTo)}\n        if (!isEmptyFigure(figTo)) newSanObj = {...newSanObj, captured: figTo}\n        const isEnPassant = /[Pp]/.test(figFrom) && sqTo === san2sq(enPassant)\n        const isBigPawn = /[Pp]/.test(figFrom) && difRow(sqFrom, sqTo) === 2\n        const isPromotion = (figFrom === 'p' && row(sqTo) === 0) ||\n                            (figFrom === 'P' && row(sqTo) === 7)\n        if (isPromotion) newSanObj = {...newSanObj, promotion: promotion ? \n                                      promotion.toUpperCase() : 'Q'}\n        let flags = ''\n        if ((figFrom === 'K' && sqFrom === 4 && sqTo === 6) || (figFrom === 'k' && sqFrom === 60 && sqTo === 62)) {\n            flags += 'k'\n        } else if ((figFrom === 'K' && sqFrom === 4 && sqTo === 2) || (figFrom === 'k' && sqFrom === 60 && sqTo === 58)) {\n            flags += 'q'\n        }\n        if (isPromotion) {\n            flags += 'p'\n        } else if (isBigPawn) {\n            flags += 'b'\n        }\n        flags += isEnPassant ? 'e' : newSanObj.captured ? 'c' : 'n'\n        \n        this.__sans__ = [...this.__sans__, {...newSanObj, flags}]\n        this.__fens__ = [...this.__fens__, newFen]\n\n        setTimeout(() => {\n        }, 0)\n\n        return this\n    }\n\n    history(options) {\n        return (options && options.verbose) ? \n            this.__sans__.slice(1) :\n            this.__sans__.slice(1).map(obj => obj.san)\n    }\n\n    moves(from = null) {\n        return from ? \n            availableMoves(this.fen).filter(it => it.from === sqNumber(from))\n            .map(it => args2san(this.fen, it.from, it.to, 'Q'))\n            :\n            availableMoves(this.fen).map(it => args2san(this.fen, it.from, it.to, 'Q')) \n    }\n    \n    get version() {return '0.9.6'}\n\n    get in_fifty_moves_rule() {\n        return parseInt(fen2obj(this.fen).halfMoveClock) >= 100\n    }\n\n    get in_threefold_repetition() {\n        const current = makeFenComparable(this.fen)\n        const groups = groupArray(this.fens().map(makeFenComparable))\n        return groups[current] >= 3\n    }\n\n    get insufficient_material() {\n        return insuficientMaterial(this.fen, 'w') && insuficientMaterial(this.fen, 'b')\n    }\n\n    get in_draw() {\n        return this.in_fifty_moves_rule || this.in_threefold_repetition ||\n               this.insufficient_material || this.isStaleMate\n    }\n\n    get isCheck() {\n        return isCheck(this.fen)\n    }\n\n    get isCheckMate() {\n        return isCheckMate(this.fen)\n    }\n    \n    get isStaleMate() {\n        return isStaleMate(this.fen)\n    }\n    \n    get fen() {\n        return this.__fens__[this.__fens__.length -1]\n    }\n\n    get isCheck() {\n        return isCheck(this.fen)\n    }\n\n    get isCheckMate() {\n        return isCheckMate(this.fen)\n    }\n\n    get isStaleMate() {\n        return isStaleMate(this.fen)\n    }\n\n    get game_over() {\n        return this.in_draw || this.isCheckMate\n    }\n\n    get(sq) {\n        return fen2obj(this.fen).fenArray[sqNumber(sq)]\n    }\n\n    put(sq, figure) {\n        if (!/[0pnbrqkPNBRQK]/.test(figure)) return null\n        sq = sqNumber(sq)\n        const obj = fen2obj(this.fen)\n        obj.fenArray[sq] = figure\n        obj.fenString = array2fenString(obj.fenArray)\n        const newFen = obj2fen(obj)\n        this.__fens__ = [...this.__fens__.slice(0, -1), newFen]\n        return this\n    }\n\n    fens() { return this.__fens__}\n\n    undo() {\n        if (this.__fens__.length < 2) return false\n        this.__fens__.splice(this.__fens__.length - 1, this.__fens__.length)\n        this.__sans__.splice(this.__sans__.length - 1, this.__sans__.length)\n        return this\n    }\n\n    toString() {\n        return this.fen\n    }\n}\n\nconst thisExports = {\n    groupArray,\n    makeSet,\n    range,\n\n    sanRegExp,\n    pgnTagLineRegExp,\n\n    defaultFen, \n    sicilianFen,\n    scandinavianFen,\n    oddFrenchFen,\n    mateLocoFen,\n    mateAyudadoFen,\n    prePastorFen,\n    pastorFen,\n\n    makeFenComparable,\n    fen2obj,\n    obj2fen,\n    expandFen,\n    compressFen,\n    fen2array,\n    defaultFenArray,\n    array2fenString,\n    computedFenString,\n    row,\n    col,\n    sq2rowcol,\n    rowcol2sq,\n    col2letter,\n    letter2col,\n    sq2san,\n    san2sq,\n    isBlackFigure,\n    isWhiteFigure,\n    isEmptyFigure,\n    isDarkSquare,\n    isLightSquare,\n    difRow,\n    difCol,\n    isSameRow,\n    isSameCol,\n    isDiagonal,\n    isAntiDiagonal,\n    isKingReach,\n    path,\n    innerPath,\n    isForward,\n    kingSq,\n    isClearPath,\n    isPawnMove,\n    isPawnAttack,\n    isCastling,\n    isKingMove,\n    isBishopMove,\n    isRookMove,\n    isQueenMove,\n    army,\n    wBishops,\n    wBishopsD,\n    wBishopsD,\n    wKings,\n    wKnights,\n    wPawns,\n    wQueens,\n    wRooks,\n    bBishops,\n    bBishopsD,\n    bBishopsL,\n    bKings,\n    bKnights,\n    bPawns,\n    bQueens,\n    bRooks,\n    wArmy,\n    bArmy,\n    wAttackers,\n    bAttackers,\n    wAttacks,\n    bAttacks,\n    wPMoves,\n    bPMoves,\n    isFriend,\n    isFoe,\n    getFigure,\n    getFigures,\n    attacksFromSq,\n    attacksOnSq,\n    checksTo,\n    isCheck,\n    isCheckMate,\n    isStaleMate   ,\n    canKingMove,\n    canMove,\n    candidateMoves,\n    availableMoves,\n    validateFen,\n    tryMove,\n    stripSan, \n    args2san,\n    san2args,\n    clear,\n    insuficientMaterial,\n    Chess,\n}\n\nconst cf = thisExports\n\n/*\n\ntry {\n    export default thisExports\n}\ncatch(e) {\n    console.log(`EXPORT (1) ERROR: ${e.message}`)\n}\n\n*/\n\nif (typeof window !== 'undefined') {\n    window.Chess = Chess\n}\n\nif (typeof global !== 'undefined') {\n    global.Chess = Chess\n}\n\ntry {\n    if (typeof module !== 'undefined') {\n        module.exports = Chess\n    } else {\n        const exports = Chess\n    }\n}\ncatch(e) {\n    console.log(`EXPORT (2) ERROR: ${e.message}`)\n}\n\n/*\ntry {\n    if (window) window.base_chess_functions = this.exports\n}\ncatch(e) {\n    console.log(`WINDOW ERROR: ${e.message}`)\n}\n\n*/"]}