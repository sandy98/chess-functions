{"version":3,"sources":["../package.json","index.js"],"names":["module","exports","name","version","author","main","files","keywords","license","scripts","build","watch","clean","lpad","stri","padChar","num","repeat","length","rpad","capitalize","toUpperCase","slice","partition","arr","len","reduce","base","el","groupArray","x","makeSet","b","find","el2","range","start","end","step","chessboard","sanRegExp","pgnTagLineRegExp","defaultFen","sicilianFen","scandinavianFen","oddFrenchFen","mateLocoFen","mateAyudadoFen","prePastorFen","pastorFen","preWCastlingFen","preBCastlingFen","simpleFen","simpleRookMate","simpleRookCheck","complexRookMate","testFen1","testFen2","fen2obj","fen","split","fenString","turn","castling","enPassant","halfMoveClock","fullMoveNumber","fenArray","fen2array","obj2fen","fenObj","values","join","expandFen","replace","d","parseInt","compressFen","z","toString","test","map","_","i","self","defaultFenArray","array2fenString","v","computedFenString","sq2san","sq","String","fromCharCode","col","row","san2sq","san","rowcol2sq","charCodeAt","sqNumber","isNaN","Math","floor","col2letter","c","letter2col","l","sq2rowcol","r","isBlackFigure","fig","isWhiteFigure","isEmptyFigure","isDarkSquare","constructor","isLightSquare","difRow","sq1","sq2","abs","difCol","isSameRow","isSameCol","isDiagonal","isAntiDiagonal","isKnightJump","isKingReach","rowStep","colStep","diagStep","antiDiagStep","path","innerPath","pth","isForward","sqFrom","sqTo","arrayFromFen","kingSq","colour","findIndex","isClearPath","fenArr","iPath","isBishopMove","isRookMove","isQueenMove","isKingMove","isPawnMove","toLowerCase","isPawnAttack","isCastling","army","ret","bPawns","bKnights","bBishops","bBishopsL","filter","bBishopsD","bRooks","bQueens","bKings","wPawns","wKnights","wBishops","wBishopsL","wBishopsD","wRooks","wQueens","wKings","wArmy","bArmy","wAttackers","bAttackers","wAttacks","a","attacksFromSq","a1","a2","concat","bAttacks","wPMoves","p","n","canMove","bPMoves","isFriend","fig1","fig2","isFoe","getFigure","getFigures","obj","el1","filterFunc","candidatesArr","attacksOnSq","s","some","s2","checksTo","foe","isCheck","isCheckMate","availableMoves","isStaleMate","isCheckMateOld","friend","kSq","cands","candidateMoves","kingMoves","it","checks","remaining","checkPath","filtered","duo","pair","newFen","tryMove","validateFen","valid","canKingMove","king","pathToCheck","sanSqTo","figOrigen","figDestino","retArr","item","from","to","code","message","promotion","figFrom","figTo","newArray","stripSan","san2args","fenobj","colOrig","console","log","extraInfo","rowOrColFunc","geoInfo","candids","reals","newfen","args2san","figure","extrainfo","capture","destiny","promotionFigure","check","attacks","fig_from_attacks","valids","otherfen","makeFenComparable","clear","fill","insuficientMaterial","color","frPawns","frKnights","frBishopsD","frBishopsL","frRooks","frQueens","foePawns","foeKnights","foeBishopsD","foeBishopsL","foeRooks","pgnDate","getFullYear","getMonth","getDate","Chess","reset","Error","__fens__","__sans__","__headers__","Event","Site","Date","Round","White","Black","Result","getResultString","headers","PlyCount","fennum","flipped","sep","fens","separ","rows","bottomLine","showArray","asciiArray","subArr","ascii","number","all","prefix","history","san_with_number","line_break","numbered_history","seven_tags","sevenTags","seven_lines","tag","others","key","other_lines","sort","pgn_headers","pgn_moves","pgn","strip_nums","text","is_san","is_result","results","states","state","prevState","label","value","token","current","index","game","prev_state","match","trim","load","move","moveArgs","result","moveStr","newSanObj","piece","captured","isEnPassant","isBigPawn","isPromotion","flags","options","verbose","args","evenargs","get","put","splice","require","groups","in_fifty_moves_rule","in_threefold_repetition","insufficient_material","in_draw","result_names","game_over","getDrawString","getBlackWinString","getWhiteWinString","getUndefinedString","thisExports","cf","window","global","e"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["module.exports={name:\"chess-functions\",version:\"0.10.4\",author:\"Domingo E. Savoretti <esavoretti@gmail.com>\",main:\"dist/index.js\",files:[\"dist/\"],keywords:[\"chess\",\"chess-rules\",\"move-validator\",\"chess.js\",\"pgn-reader\"],license:\"MIT\",scripts:{build:\"parcel build src/index.js && cp src/index.html dist/index.html\",watch:\"parcel watch index.html\",clean:\"rm -r ./dist/\"}};","\"use strict\";\n\nconst lpad = (stri, padChar = '0', num = 2) => `${padChar.repeat(num - stri.length)}${stri}`\nconst rpad = (stri, padChar = '0', num = 2) => `${stri}${padChar.repeat(num - stri.length)}`\n\nconst capitalize = stri => `${stri[0].toUpperCase()}${stri.slice(1)}`\n\nconst partition = (arr, len) => arr.reduce((base, el) => \n    base[base.length -1].length < len ? [...base.slice(0, -1), [...base[base.length -1], el]] : \n                                        [...base, [el]] , [[]])\n\nconst groupArray = arr => {\n    return arr.reduce((base, x) => {\n        if (x in base) {\n            base[x] += 1\n        } else {\n            base[x] = 1\n        }\n        return base\n    }, {})\n}\n\nconst makeSet = arr => arr.reduce((b, el) => b.find(el2 => el2 === el) ? b : [...b, el], [])\n\nconst range = (start = 0, end = 9, step = 1) => {\n    if (start === end) {\n        return [start]\n    }\n\n    if (!step) {\n        if (start < end) {\n            step = 1\n        } else {\n            step = -1\n        }\n    }\n\n    if (start > end && step > 0) {\n        return []\n    }\n\n    if (start < end && step < 0) {\n        return []\n    }\n\n    return [start, ...range(start + step, end, step)]\n}\n\nconst chessboard = range(0, 63)\n\nconst sanRegExp = /(?:(^0-0-0|^O-O-O)|(^0-0|^O-O)|(?:^([a-h])(?:([1-8])|(?:x([a-h][1-8])))(?:=?([NBRQ]))?)|(?:^([NBRQK])([a-h])?([1-8])?(x)?([a-h][1-8])))(?:(\\+)|(#)|(\\+\\+))?$/\nconst pgnTagLineRegExp = /^\\s*\\[\\s*(.+?)\\s+\"(.+?)\"\\s*\\]\\s*$/\n\nconst defaultFen = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\nconst sicilianFen = 'rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 1'\nconst scandinavianFen = 'rnbqkbnr/ppp1pppp/8/3p4/4P3/8/PPPP1PPP/RNBQKBNR w KQkq d6 0 2'\nconst oddFrenchFen = 'rnbqkbnr/ppp2ppp/4p3/3pP3/8/8/PPPP1PPP/RNBQKBNR w KQkq d6 0 3'\nconst mateLocoFen = 'rnb1kbnr/pppp1ppp/8/4p3/6Pq/5P2/PPPPP2P/RNBQKBNR w KQkq - 1 3'\nconst mateAyudadoFen = 'r1bqnNnr/pppkpp1p/7R/3p4/8/8/PPPPPPP1/RNBQKBN1 b Q - 0 6'\nconst prePastorFen = 'r1bqkb1r/pppp1ppp/2n2n2/4p2Q/2B1P3/8/PPPP1PPP/RNB1K1NR w KQkq - 4 4'\nconst pastorFen = 'r1bqkb1r/pppp1Qpp/2n2n2/4p3/2B1P3/8/PPPP1PPP/RNB1K1NR b KQkq - 0 4'\nconst preWCastlingFen = 'rnbqk2r/pppp1ppp/5n2/2b1p3/2B1P3/5N2/PPPP1PPP/RNBQK2R w KQkq - 4 4'\nconst preBCastlingFen = 'rnbqk2r/pppp1ppp/5n2/2b1p3/2B1P3/5N2/PPPP1PPP/RNBQ1RK1 b kq - 5 4'\nconst simpleFen = '7k/7P/7K/8/8/8/8/8 w - - 0 1'\nconst simpleRookMate = 'R6k/6pp/8/8/3n4/8/8/7K b - - 0 1'\nconst simpleRookCheck = 'R6k/6pp/8/8/3r4/8/8/7K b - - 0 1'\nconst complexRookMate = 'R6k/6qp/5B2/8/8/8/8/7K b - - 0 1'\nconst testFen1 = '8/6B1/6p1/R6k/7p/8/8/K5R1 b KQkq - 0 1'\nconst testFen2 = '8/5BB1/6p1/R6k/7p/8/8/K5R1 b KQkq - 0 1'\n\nconst fen2obj = fen => {\n    const arr = fen.split(/\\s+/)\n    return {\n        fenString: arr[0],\n        turn: arr[1],\n        castling: arr[2],\n        enPassant: arr[3],\n        halfMoveClock: arr[4],\n        fullMoveNumber: arr[5],\n        fenArray: fen2array(arr[0])\n    }\n}\n\nconst obj2fen = fenObj => {\n    delete fenObj.fenArray\n    return values(fenObj).join(' ')\n}\n\nconst expandFen = fen => fen.replace(/\\//g, '').replace(/[1-8]/g, d => ('0').repeat(parseInt(d)))\n\nconst compressFen = fen => fen.replace(/(.{8})(?!$)/g, \"$1/\").replace(/0+/g, z => z.length.toString())\n\nconst fen2array = fen => {\n    if (/^(.+\\/){7}.+$/.test(fen)) {\n        fen = expandFen(fen)\n    } else if (fen.length !== 64) {\n        return []\n    }\n    return fen.split('').map((_, i, self) => self[i ^ 56])\n}\n\nconst defaultFenArray = fen2array(fen2obj(defaultFen).fenString)\n\nconst array2fenString = arr => compressFen(arr.map((v, i) => arr[i ^56]).join(''))\n\nconst computedFenString = array2fenString(defaultFenArray)\n\nconst sq2san = sq => sq >= 0 && sq < 64 ? \n                     `${String.fromCharCode(97 + col(sq))}${String.fromCharCode(49 + row(sq))}` :\n                     '-'\n\nconst san2sq = san => /[a-h][1-8]/.test(san) ? \n                      rowcol2sq(san.charCodeAt(1) -49, san.charCodeAt(0) - 97) :\n                      -1\n\nconst sqNumber = sq => isNaN(sq) ? san2sq(sq) : parseInt(sq)\n\nconst row = sq => Math.floor(sqNumber(sq) / 8)\n\nconst col = sq => sqNumber(sq) % 8\n\nconst col2letter = c => String.fromCharCode(97 + c)\n\nconst letter2col = l => l.charCodeAt(0) - 97\n\nconst sq2rowcol = sq => ({row: row(sq), col: col(sq)})\n\nconst rowcol2sq = (r, c) => r * 8 + c\n\nconst isBlackFigure = fig => /[pnbrqk]/.test(fig)\n\nconst isWhiteFigure = fig => /[PNBRQK]/.test(fig)\n\nconst isEmptyFigure = fig => fig === '0'\n\nconst isDarkSquare = sq => {\n    if (sq.constructor.name === 'String') {\n        sq = san2sq(sq)\n    }\n    return (row(sq) % 2 === 0 && col(sq) % 2 === 0) || (row(sq) % 2 !== 0 && col(sq) % 2 !== 0)\n}\n\nconst isLightSquare = sq => !isDarkSquare(sq)\n\nconst difRow = (sq1, sq2) => Math.abs(row(sq1) - row(sq2))\n\nconst difCol = (sq1, sq2) => Math.abs(col(sq1) - col(sq2))\n\nconst isSameRow = (sq1, sq2) => difRow(sq1, sq2) === 0\n\nconst isSameCol = (sq1, sq2) => difCol(sq1, sq2) === 0\n\nconst isDiagonal = (sq1, sq2) => difCol(sq1, sq2) === difRow(sq1, sq2)\n\nconst isAntiDiagonal = (sq1, sq2) => difCol(sq1, sq2) === difRow(sq1, sq2) && \n                                     Math.abs(sqNumber(sq1) - sqNumber(sq2)) % 7 === 0 &&\n                                     sqNumber(sq1) !== 63 &&\n                                     sqNumber(sq2) !== 63\n\nconst isKnightJump = (sq1, sq2) => (difCol(sq1, sq2) === 2  && difRow(sq1, sq2) === 1) ||\n                                   (difCol(sq1, sq2) === 1  && difRow(sq1, sq2) === 2) \n\nconst isKingReach = (sq1, sq2) => difCol(sq1, sq2) < 2 && difRow(sq1, sq2) < 2\n\nconst rowStep = 1\nconst colStep = 8\nconst diagStep = 9\nconst antiDiagStep = 7\n\nconst path = (sq1, sq2) => {\n    let step\n    if (sq1 === sq2) {\n        return [sqNumber(sq1)]\n    } else if (isSameCol(sq1, sq2)) {\n        if (sqNumber(sq1) < sqNumber(sq2)) {\n            step = colStep\n        } else {\n            step = -colStep\n        }\n    } else if (isSameRow(sq1, sq2)) {\n        if (sqNumber(sq1) < sqNumber(sq2)) {\n            step = rowStep\n        } else {\n            step = -rowStep\n        }\n    } else if (isAntiDiagonal(sq1, sq2)) {\n        if (sqNumber(sq1) < sqNumber(sq2)) {\n            step = antiDiagStep\n        } else {\n            step = -antiDiagStep\n        }\n    } else if (isDiagonal(sq1, sq2)) {\n        if (sqNumber(sq1) < sqNumber(sq2)) {\n            step = diagStep\n        } else {\n            step = -diagStep\n        }\n    } else if (isKnightJump(sq1, sq2)) {\n        return [sqNumber(sq1), sqNumber(sq2)]\n    } else {\n        return []\n    }\n    return range(sqNumber(sq1), sqNumber(sq2), step)\n}\n\nconst innerPath = pth => pth.slice(1, -1)\n\nconst isForward = (fig, sqFrom, sqTo) => isBlackFigure(fig) ? \n                  row(sqFrom) > row(sqTo) : \n                  row(sqFrom) < row(sqTo)\n\nconst arrayFromFen = fen => {\n    if (fen.constructor.name === 'Array') {\n        return fen\n    } else if (!(fen.constructor.name === 'String')) {\n        return []\n    } else {\n        if (/\\s+/.test(fen)) {\n            return fen2obj(fen).fenArray\n        } else {\n            return fen2array(fen)\n        }\n    }\n}\n\nconst kingSq = (fen, colour) => arrayFromFen(fen).findIndex( x => x === (/[a-z]/.test(colour) && colour !== 'w' ? 'k' : 'K'))\n\nconst isClearPath = (fen, pth) => {\n    if  (pth.length < 3) {\n        return true\n    }\n\n    const fenArr = arrayFromFen(fen)\n    const iPath = innerPath(pth)\n\n    for (let v of iPath) {\n        if (fenArr[v] !== '0') {\n            return false\n        }\n    }\n\n    return true\n}\n\nconst isBishopMove = (sqFrom, sqTo) => isDiagonal(sqFrom, sqTo) && sqFrom !== sqTo\n\nconst isRookMove = (sqFrom, sqTo) => (isSameRow(sqFrom, sqTo) || isSameCol(sqFrom, sqTo)) && sqFrom !== sqTo\n\nconst isQueenMove = (sqFrom, sqTo) => (isBishopMove(sqFrom, sqTo) || isRookMove(sqFrom, sqTo)) && sqFrom !== sqTo\n\nconst isKingMove = (sqFrom, sqTo) => difRow(sqNumber(sqFrom), sqNumber(sqTo)) < 2 &&  \n                                     difCol(sqNumber(sqFrom), sqNumber(sqTo)) < 2 &&\n                                     sqFrom !== sqTo\n\nconst isPawnMove = (sqFrom, sqTo, colour = 'w') => {\n    colour = colour.toLowerCase()\n    if (!/[wb]/.test(colour)) {\n        return false\n    }\n    const fig = colour === 'w' ? 'P' : 'p'\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    if (!isForward(fig, sqFrom, sqTo)) {\n        return 0\n    }\n\n    if (fig === 'P') {\n        if (sqTo === (sqFrom + 8)) return 1\n        if (sqTo === (sqFrom + 16) && row(sqFrom) === 1) return 2\n        return 0\n    } else {\n        if (sqTo === (sqFrom - 8)) return 1\n        if (sqTo === (sqFrom - 16) && row(sqFrom) === 6) return 2\n        return 0\n    }\n}\n\nconst isPawnAttack = (sqFrom, sqTo, colour = 'w') => {\n    colour = colour.toLowerCase()\n    if (!/[wb]/.test(colour)) {\n        return false\n    }\n    const fig = colour === 'w' ? 'P' : 'p'\n    if (!isForward(fig, sqFrom, sqTo)) {\n        return false\n    }\n    if (difCol(sqFrom, sqTo) !== 1) return false\n    if (difRow(sqFrom, sqTo) !== 1) return false\n    return true\n}\n\nconst isCastling = (sqFrom, sqTo, colour = 'w') => {\n    colour = colour.toLowerCase()\n    if (!/[wb]/.test(colour)) {\n        return false\n    }\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    if (colour === 'w') {\n        return sqFrom === 4 && (sqTo === 2 || sqTo === 6)\n    } else {\n        return sqFrom === 60 && (sqTo === 58 || sqTo === 62)\n    }\n}\n\nconst army = (fen, fig) => {\n    const fenArr = fen2array(fen)\n    let ret = []\n    for (let v of chessboard) {\n        if (fenArr[v] === fig) {\n            ret = [...ret, v]\n        }\n    }\n    return ret\n}\n\nconst bPawns = fen => army(fen, 'p')\nconst bKnights = fen => army(fen, 'n')\nconst bBishops = fen => army(fen, 'b')\nconst bBishopsL = fen => army(fen, 'b').filter(sq => isLightSquare(sq))\nconst bBishopsD = fen => army(fen, 'b').filter(sq => isDarkSquare(sq))\nconst bRooks = fen => army(fen, 'r')\nconst bQueens = fen => army(fen, 'q')\nconst bKings = fen => army(fen, 'k')\n\nconst wPawns = fen => army(fen, 'P')\nconst wKnights = fen => army(fen, 'N')\nconst wBishops = fen => army(fen, 'B')\nconst wBishopsL = fen => army(fen, 'B').filter(sq => isLightSquare(sq))\nconst wBishopsD = fen => army(fen, 'B').filter(sq => isDarkSquare(sq))\nconst wRooks = fen => army(fen, 'R')\nconst wQueens = fen => army(fen, 'Q')\nconst wKings = fen => army(fen, 'K')\n\nconst wArmy = fen => [\n    ...wPawns(fen), \n    ...wKnights(fen), \n    ...wBishops(fen),\n    ...wRooks(fen),\n    ...wQueens(fen),\n    ...wKings(fen),\n]\n\nconst bArmy = fen => [\n    ...bPawns(fen), \n    ...bKnights(fen), \n    ...bBishops(fen),\n    ...bRooks(fen),\n    ...bQueens(fen),\n    ...bKings(fen),\n]\n\nconst wAttackers = fen => [\n    ...wKnights(fen), \n    ...wBishops(fen),\n    ...wRooks(fen),\n    ...wQueens(fen),\n]\n\nconst bAttackers = fen => [\n    ...bKnights(fen), \n    ...bBishops(fen),\n    ...bRooks(fen),\n    ...bQueens(fen),\n]\n\nconst wAttacks = fen => wAttackers(fen).map(a => attacksFromSq(fen, a)).reduce((a1, a2) => a1.concat(a2), [])\nconst bAttacks = fen => bAttackers(fen).map(a => attacksFromSq(fen, a)).reduce((a1, a2) => a1.concat(a2), [])\n\nconst wPMoves = fen => wPawns(fen).map(p => chessboard.filter(n => canMove(fen, p, n)))\n                       .reduce((a1, a2) => a1.concat(a2))   \n\nconst bPMoves = fen => bPawns(fen).map(p => chessboard.filter(n => canMove(fen, p, n)))\n                       .reduce((a1, a2) => a1.concat(a2))   \n\nconst isFriend = (fig1, fig2) => (isBlackFigure(fig1) && isBlackFigure(fig2)) || (isWhiteFigure(fig1) && isWhiteFigure(fig2))\nconst isFoe = (fig1, fig2) => (isBlackFigure(fig1) && isWhiteFigure(fig2)) || (isWhiteFigure(fig1) && isBlackFigure(fig2))\n\nconst getFigure = (fen, sq) => arrayFromFen(fen)[sqNumber(sq)]\n\nconst getFigures = (fen, path) => path.map( n => {\n    const obj = {}\n    obj[n] = getFigure(fen, n)\n    return obj\n}).reduce((el1, el2) => ({...el1, ...el2}), {})\n\nconst attacksFromSq = (fen, sq) => {\n    const fenArr = arrayFromFen(fen)\n    sq = sqNumber(sq)\n    const fig = fenArr[sq]\n    if (isEmptyFigure(fig)) return []\n    let filterFunc\n\n    switch (fig.toLowerCase()) {\n        case 'n':\n            filterFunc = isKnightJump\n            break\n        case 'b':\n            filterFunc = isBishopMove\n            break\n        case 'r':\n            filterFunc = isRookMove\n            break\n        case 'q':\n            filterFunc = isQueenMove\n            break\n        case 'k':\n            filterFunc = isKingMove\n            break\n        default: \n            return fig === 'p' ? [sq - 7, sq - 9] : [sq + 7, sq + 9]\n        }\n\n        const candidatesArr = chessboard.filter( n => filterFunc(sq, n))\n\n        return candidatesArr.filter(n => isClearPath(fenArr, path(sq, n)))\n}\n\nconst attacksOnSq = (fen, sq, colour = 'w') => {\n    colour = colour.toLowerCase()\n    if (!/[wb]/.test(colour)) {\n        return null\n    }\n\n    sq = sqNumber(sq)\n\n    const army = colour === 'w' ? wArmy(fen) : bArmy(fen)\n    // console.log(\"Army:\\n\", army)\n\n    return army.filter(s => attacksFromSq(fen, s).some(s2 => s2 === sq))\n}\n\nconst checksTo = (fen, colour = 'w') => {\n    const foe = colour.toLowerCase() === 'w' ? 'b' : 'w'\n    return attacksOnSq(fen, kingSq(fen, colour.toLowerCase()), foe)\n}\n\nconst isCheck = fen => checksTo(fen, fen2obj(fen).turn).length > 0\n\nconst isCheckMate = fen => isCheck(fen) && availableMoves(fen).length === 0\n\nconst isStaleMate = fen => !isCheck(fen) && availableMoves(fen).length === 0\n\nconst isCheckMateOld = fen => {\n    if (!isCheck(fen)) return false\n    const { turn } = fen2obj(fen)\n    const [friend, foe, kSq] = turn === 'w' ? ['w', 'b', kingSq(fen, 'w')] : ['b', 'w', kingSq(fen, 'b')]\n    const cands = candidateMoves(fen)\n    //console.log(`Candidates: ${JSON.stringify(cands)}`)\n    const kingMoves = cands.find(it => it[0] === kSq)[1]\n    if (kingMoves.length > 0) return false\n    const checks = checksTo(fen, friend)\n    if (checks.length > 1) return true\n    const remaining = cands.filter(it => it[0] !== kSq)\n    //console.log(`Remaining moves: ${JSON.stringify(remaining)}`)\n    const  checkPath = path(checks[0], kSq).filter(n => n !== kSq)\n    //console.log(`Check path: ${JSON.stringify(checkPath)}`)\n    const filtered = remaining.filter( duo => duo[1].some(n => checkPath.find(pth => pth === n)))\n    //console.log(`Filtered: ${JSON.stringify(filtered)}`)\n    if (filtered.length > 0) {\n        for (let pair of filtered) {\n            const newPair = [pair[0], pair[1].filter(v => checkPath.find(n => n === v))]\n            //console.log(`New Pair: ${JSON.stringify(newPair)}`)\n            for (let v of pair[1]) {\n                //console.log(`pair[0]: ${pair[0]} , v: ${v}`)\n                const newFen = tryMove(fen, pair[0], v, 'Q')\n                //console.log(`newFen: ${newFen}`)\n                if (newFen && validateFen(newFen).valid) return false\n            }\n        }\n    }\n\n    return true\n}\n\nconst canKingMove = (fen, sqFrom, sqTo, king) => {\n    const {castling, turn, fenArray} = fen2obj(fen)\n    const friend = king === 'k' ? 'b' : 'w'\n    const foe = king === 'k' ? 'w' : 'b'\n\n    //console.log(`Castling: ${castling}, turn: ${turn}, friend: ${friend}, foe: ${foe}`)\n    if(isKingMove(sqFrom, sqTo)) {\n        return attacksOnSq(fen, sqTo, foe).length === 0\n    } else if (isCastling(sqFrom, sqTo, friend)) {\n        //console.log(`IsCastling: ${sqFrom}, ${sqTo}`)\n        if (!isEmptyFigure(fenArray[sqTo])) {\n            //console.log('Aledgely square ', sqTo, ' is not empty')\n            return false\n        }\n        let pathToCheck\n        switch (sqTo) {\n            case 6:\n                if (!/K/.test(castling)) return false\n                pathToCheck = path(4, 6)\n                break\n            case 2:\n                if (!/Q/.test(castling)) return false\n                pathToCheck = path(4, 2)\n                break\n            case 62:\n                if (!/k/.test(castling)) return false\n                pathToCheck = path(60, 62)\n                break\n            case 58:\n                if (!/q/.test(castling)) return false\n                pathToCheck = path(60, 58)\n                break\n            default:\n                return false\n        }\n        //console.log(\"!pathToCheck.map(s => attacksOnSq(fen, s, foe)).some(a => a.length > 0)\",\n        !pathToCheck.map(s => attacksOnSq(fen, s, foe)).some(a => a.length > 0)\n        return !pathToCheck.map(s => attacksOnSq(fen, s, foe)).some(a => a.length > 0)\n    } else {\n        return false\n    }\n}\n\n\nconst canMove = (fen, sqFrom, sqTo) => {\n    if (path(sqFrom, sqTo).length < 2 ) {\n        return false\n    }\n    if (!isClearPath(fen, path(sqFrom, sqTo))) {\n        return false\n    }\n\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    const sanSqTo = sq2san(sqTo)\n    const fenObj = fen2obj(fen)\n    const {fenArray, enPassant} = fenObj\n    const figOrigen = fenArray[sqFrom]\n\n    if (figOrigen === '0') {\n        return false\n    }\n\n    const figDestino = fenArray[sqTo]\n\n    if (isFriend(figOrigen, figDestino)) {\n        return false\n    }\n\n    switch(figOrigen) {\n        case 'p':\n            //console.log(`Testing move from ${sqFrom} to ${sqTo} for black pawn`)\n            if (isPawnMove(sqFrom, sqTo, 'b') && !isEmptyFigure(figDestino)) return false\n            if (isPawnAttack(sqFrom, sqTo, 'b') && !isWhiteFigure(figDestino) && sanSqTo !== enPassant) return false\n            if (!isPawnMove(sqFrom, sqTo, 'b') && !isPawnAttack(sqFrom, sqTo, 'b')) return false\n            break\n        case 'P':\n            //console.log(`Testing move from ${sqFrom} to ${sqTo} for white pawn`)\n            if (isPawnMove(sqFrom, sqTo, 'w') && !isEmptyFigure(figDestino)) return false\n            if (isPawnAttack(sqFrom, sqTo, 'w') && !isBlackFigure(figDestino) && sanSqTo !== enPassant) return false\n            if (!isPawnMove(sqFrom, sqTo, 'w') && !isPawnAttack(sqFrom, sqTo, 'w')) return false\n            break\n        case 'K':\n        case 'k':\n            return canKingMove(fen, sqFrom, sqTo, figOrigen)\n            break\n        case 'q':\n        case 'Q':\n            if (!isQueenMove(sqFrom, sqTo)) return false\n            break\n        case 'r':\n        case 'R':\n            if (!isRookMove(sqFrom, sqTo)) return false\n            break\n        case 'b':\n        case 'B':\n            if (!isBishopMove(sqFrom, sqTo)) return false\n            break\n        case 'n':\n        case 'N':\n            if (!isKnightJump(sqFrom, sqTo)) return false\n            break\n        default:\n            return false\n    }\n\n    return true\n}\n \nconst candidateMoves = fen => {\n  const {fenArray, turn, castling, enPassant} = fen2obj(fen)\n  const army = turn === 'w' ? wArmy(fen) : bArmy(fen)\n  return army.map(sq => [sq, chessboard.filter(n => canMove(fen, sq, n))])\n}\n\nconst availableMoves = fen => {\n    let retArr = []\n    for (let item of candidateMoves(fen)) {\n        for (let sq of item[1]) {\n            const newFen = tryMove(fen, item[0], sq, 'Q')\n            if (newFen && validateFen(newFen).valid) retArr = [...retArr, {from: item[0], to: sq}]\n        }\n    }\n    return retArr\n}\n\nconst validateFen = fen => {\n    const {fenArray, turn} = fen2obj(fen)\n    if (fenArray.filter(fig => fig === 'k').length !== 1) {\n        return {valid: false, code: 2, message: 'There must be one and only one black king'}\n    }\n    if (fenArray.filter(fig => fig === 'K').length !== 1) {\n        return {valid: false, code: 3, message: 'There must be one and only one white king'}\n    }\n    if (checksTo(fen, turn === 'w' ? 'b' : 'w').length > 0) {\n        return {valid: false, code: 1, message: `The ${turn === 'b' ? 'white' : 'black'} side is in check, while it's not its turn to move`}\n    }\n    return {valid: true, code: 0, message: 'OK'}\n}\n\nconst tryMove = (fen, sqFrom, sqTo, promotion = 'Q') => {\n    if (!fen || fen.constructor.name !== 'String') return false\n    if (!canMove(fen, sqFrom, sqTo)) return false\n    let {fenArray, turn, castling, enPassant, halfMoveClock, fullMoveNumber} = fen2obj(fen)\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    const [figFrom, figTo] = [fenArray[sqFrom], fenArray[sqTo]]\n    let newArray = [...fenArray]\n\n    newArray[sqFrom] = '0'\n    if (figFrom === 'P' && row(sqTo) === 7) {\n        newArray[sqTo] = promotion ? promotion.toUpperCase() : 'Q'\n    } else if (figFrom === 'p' && row(sqTo) === 0) {\n        newArray[sqTo] = promotion ? promotion.toLowerCase() : 'q'\n    } else {\n        newArray[sqTo] = figFrom\n    }\n    if (figFrom === 'P' && sq2san(sqTo) === enPassant) {\n        newArray[sqTo - 8] = '0'\n    } else if (figFrom === 'p' && sq2san(sqTo) === enPassant) {\n        newArray[sqTo + 8] = '0'\n    }\n\n    if (figFrom === 'K' && sqFrom === 4 && sqTo === 6) {\n        newArray[5] = 'R'\n        newArray[7] = '0'\n    } else if (figFrom === 'K' && sqFrom === 4 && sqTo === 2) {\n        newArray[3] = 'R'\n        newArray[0] = '0'\n    } else if (figFrom === 'k' && sqFrom === 60 && sqTo === 62) {\n        newArray[61] = 'r'\n        newArray[63] = '0'\n    } else if (figFrom === 'k' && sqFrom === 60 && sqTo === 58) {\n        newArray[59] = 'r'\n        newArray[56] = '0'\n    }   \n\n    if (sqFrom === 4) castling = castling.replace('K', '').replace('Q', '')\n    if (sqFrom === 60) castling = castling.replace('k', '').replace('q', '')\n\n    if (sqFrom === 7) castling = castling.replace('K', '')\n    if (sqFrom === 0) castling = castling.replace('Q', '')\n\n    if (sqFrom === 63) castling = castling.replace('k', '')\n    if (sqFrom === 56) castling = castling.replace('q', '')\n\n    if (castling === '') castling = '-'\n\n    turn = turn === 'w' ? 'b' : 'w'\n\n    if (figFrom === 'P' && isPawnMove(sqFrom, sqTo, 'w') === 2) {\n        enPassant = sq2san(sqTo - 8)\n    } else if (figFrom === 'p' && isPawnMove(sqFrom, sqTo, 'b') === 2) {\n        enPassant = sq2san(sqTo + 8)\n    } else {\n        enPassant = '-'\n    }\n\n    if (figFrom !== 'P' && figFrom !== 'p' && figTo === '0') {\n        halfMoveClock = parseInt(halfMoveClock) + 1\n    } else {\n        halfMoveClock = '0'\n    }\n\n    fullMoveNumber = turn === 'w' ? parseInt(fullMoveNumber) + 1 : fullMoveNumber\n\n    const fenString = array2fenString(newArray)\n\n    return `${fenString} ${turn} ${castling} ${enPassant} ${halfMoveClock} ${fullMoveNumber}`\n}\n\nconst stripSan = san => san.replace(/[+#=x]/g, '')\n\nconst san2args = (fen, san) => {\n    const fenobj = fen2obj(fen)\n    \n    san = stripSan(san)\n    if (san === '0-0' || san === 'O-O') {\n        if (fenobj.turn === 'w') {\n            return {sqFrom: 4, sqTo: 6, promotion: null}\n        } else {\n            return {sqFrom: 60, sqTo: 62, promotion: null}\n        }\n    }\n\n    if (san === '0-0-0' || san === 'O-O-O') {\n        if (fenobj.turn === 'w') {\n            return {sqFrom: 4, sqTo: 2, promotion: null}\n        } else {\n            return {sqFrom: 60, sqTo: 58, promotion: null}\n        }\n    }\n\n    let sqFrom, sqTo, promotion, army\n\n    if (/[a-h]/.test(san[0])) {\n        const colOrig = letter2col(san[0])\n        if (/[1-8]/.test(san[1])) {\n           sqTo = sqNumber(san.slice(0, 2))\n        } else {\n           sqTo = sqNumber(san.slice(1, 3))\n        }\n        army = fenobj.turn === 'w' ? wPawns(fen) : bPawns(fen) \n        sqFrom = army.find(n => col(n) === colOrig && canMove(fen, n, sqTo))\n        if (typeof sqFrom === 'undefined') sqFrom = -1\n\n        if (/[QNRBqnrb]/.test(san[san.length - 1])) {\n            promotion = san[san.length - 1]\n        } else {\n            promotion = null\n        }\n        return {sqFrom, sqTo, promotion}\n    } else if (isWhiteFigure(san[0]) && san[0] !== 'P') {\n        promotion = null\n        const fig = san[0]\n        switch (fig) {\n            case 'N':\n                army = fenobj.turn === 'w' ? wKnights(fen) : bKnights(fen)\n                break\n            case 'B':\n                army = fenobj.turn === 'w' ? wBishops(fen) : bBishops(fen)\n                break\n            case 'R':\n                army = fenobj.turn === 'w' ? wRooks(fen) : bRooks(fen)\n                break\n            case 'Q':\n                army = fenobj.turn === 'w' ? wQueens(fen) : bQueens(fen)\n                break\n            case 'K':\n                army = fenobj.turn === 'w' ? wKings(fen) : bKings(fen)\n                break\n            }\n        sqTo = san2sq(san.slice(san.length - 2, san.length))\n        if (san.length === 5) {\n            //console.log('san length 5')\n            sqFrom = san2sq(san.slice(1, 3))\n        } else if (san.length === 4) {\n          console.log('san length 4')\n          const extraInfo = san[1]\n          const [rowOrColFunc, geoInfo] = /[1-8]/.test(extraInfo) ? \n                                          [row, parseInt(extraInfo) - 1] : \n                                          [col, letter2col(extraInfo)]\n          sqFrom = army.find(n => rowOrColFunc(n) === geoInfo && canMove(fen, n, sqTo)) \n          if (typeof sqFrom === 'undefined') sqFrom = -1\n        } else {\n            const candids = army.filter(n => canMove(fen, n, sqTo))\n            switch (candids.length) {\n                case 0:\n                    //console.log('0 candidates')\n                    sqFrom = -1\n                    break\n                case 1:\n                    //console.log('1 candidato: ' + candids[0])\n                    sqFrom = candids[0]\n                    break\n                default:\n                    const reals = candids.filter(sq => {\n                        const newfen = tryMove(fen, sq, sqTo, null)\n                        return newfen && validateFen(newfen).valid\n                    })\n                    // console.log(\"Hay \" + reals.length + \" jugada/s para elegir\")\n                    //console.log('Reals: ' + JSON.stringify(reals))\n                    sqFrom  = reals.length === 1 ? reals[0] : -1              \n            } \n        }\n        return {sqFrom, sqTo, promotion}\n    } else {\n        //console.log('Llegamos al final sin saber que pasó')\n        return {sqFrom: -1, sqTo: -1, promotion: null}\n    }\n}\n\nconst args2san = (fen, sqFrom, sqTo, promotion) => {\n    const {fenArray, turn, enPassant, castling} = fen2obj(fen)\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    const [figFrom, figTo] = [fenArray[sqFrom], fenArray[sqTo]]\n    if (isEmptyFigure(figFrom)) return null\n\n    let figure, extrainfo, capture, destiny, promotionFigure, check\n\n    const newfen = tryMove(fen, sqFrom, sqTo, promotion)\n    if (!(newfen && validateFen(newfen).valid)) return null\n\n    if (isCheckMate(newfen)) {\n        check = '#'\n    } else if (isCheck(newfen)) {\n        check = '+'\n    } else {\n        check = ''\n    }\n\n    if (figFrom === 'K' && sqFrom === 4) {\n        if (sqTo === 6) return `O-O${check}`\n        if (sqTo === 2) return `O-O-O${check}`\n    }\n\n    if (figFrom === 'k' && sqFrom === 60) {\n        if (sqTo === 62) return `O-O${check}`\n        if (sqTo === 58) return `O-O-O${check}`\n    }\n    \n    \n    capture = !isEmptyFigure(figTo) ? 'x' : \n              /[Pp]/.test(figFrom) && sqNumber(enPassant) === sqTo ? 'x' : ''\n    destiny = sq2san(sqTo)\n\n    if (/[Pp]/.test(figFrom)) {\n        figure =  isSameCol(sqFrom, sqTo) ?  '' : col2letter(col(sqFrom))\n        extrainfo = ''\n        if ((row(sqTo) === 7 && figFrom === 'P') || \n           (row(sqTo) === 7 && figFrom === 'P')) {\n            promotionFigure = `=${promotion ? promotion.toUpperCase() : 'Q'}`\n        } else {\n            promotionFigure = ''\n        }\n    } else {\n        figure = figFrom.toUpperCase()\n        promotionFigure = ''\n        const attacks = attacksOnSq(fen, sqTo, turn)\n        const fig_from_attacks = attacks.filter( sq => fenArray[sq] === figFrom && sq !== sqFrom)\n        if (fig_from_attacks.length === 0) {\n            extrainfo = ''\n        } else {\n            const valids = fig_from_attacks.filter(sq => {\n                const otherfen = tryMove(fen, sq, sqTo, null)\n                return otherfen && validateFen(otherfen).valid\n            })\n            if (valids.length > 1) {\n                extrainfo = sq2san(sqFrom)\n            } else if (valids.length === 1) {\n                if (isSameCol(sqFrom, valids[0])) {\n                    extrainfo = (row(sqFrom) + 1).toString()\n                } else {\n                    extrainfo = col2letter(col(sqFrom))\n                }\n            } else {\n                extrainfo = ''\n            }\n        }\n    }\n    \n    return `${figure}${extrainfo}${capture}${destiny}${promotionFigure}${check}`\n}\n\nconst makeFenComparable = fen => fen.split(/\\s+/).slice(0, 4).join(' ')\n\nconst clear = (fen) => {\n    const obj = fen2obj(fen)\n    obj.fenArray = range(0, 63).fill('0')\n    obj.fenString = array2fenString(obj.fenArray)\n    return obj2fen(obj)\n}\n\nconst insuficientMaterial = (fen, color = 'w') => {\n    if (!/^[wb]$/i.test(color)) return null\n    const [frPawns, frKnights, frBishopsD, frBishopsL, frRooks, frQueens, \n           foePawns, foeKnights, foeBishopsD, foeBishopsL, \n           foeRooks, foeQueens] = color.toLowerCase() === 'w' ? \n               [wPawns(fen), wKnights(fen), wBishopsD(fen), wBishopsL(fen), wRooks(fen),\n                wQueens(fen), bPawns(fen), bKnights(fen), bBishopsD(fen), bBishopsL(fen),\n                bRooks(fen), bQueens(fen) \n               ] :\n               [bPawns(fen), bKnights(fen), bBishopsD(fen), bBishopsL(fen), bRooks(fen),\n                bQueens(fen), wPawns(fen), wKnights(fen), wBishopsD(fen), wBishopsL(fen),\n                wRooks(fen), wQueens(fen) \n               ] \n    \n    if (frPawns.length || frRooks.length || frQueens.length) return false // Mate de torre, dama o pieza coronada\n\n    if (frBishopsD.length && frBishopsL.length) return false // Mate de 2 alfiles\n\n    if ((frBishopsD.length || frBishopsL.length)  && frKnights.length) return false // Mate de 2 alfil y caballo\n\n    if (frKnights.length > 1) return false // Mate de 2 o más caballos\n\n    /* Mates con material que por si mismo es insuficiente, \n       pero es \"ayudado\" por una pieza enemiga que ahoga */\n    if (frBishopsD.length) {\n        if (foePawns.length || foeKnights.length || foeBishopsL.length) return false\n    } else if (frBishopsL.length) {\n        if (foePawns.length || foeKnights.length || foeBishopsD.length) return false\n    } else if (frKnights.length) {\n        if (foePawns.length || foeKnights.length || \n            foeBishopsD.length || foeBishopsL.length ||\n            foeRooks.length) return false\n    }\n    /* Fin Mates con material que por si mismo es insuficiente, \n       pero es \"ayudado\" por una pieza enemiga que ahoga */\n    \n    return true\n}\n\nconst pgnDate = d => `${d.getFullYear()}.${lpad(d.getMonth() + 1)}.${lpad(d.getDate())}`\n\nclass Chess {\n    constructor(fen = defaultFen) {\n        return this.reset(fen)\n    }\n    \n    static sevenTags() {\n        return ['Event', 'Site', 'Date', 'Round', 'White', 'Black', 'Result']\n    }\n\n    static results() { return [\"*\", \"1-0\", \"0-1\", \"1/2-1/2\"]}\n    static result_names() { return [\"undefined\", \"white\", \"black\", \"draw\"]}\n\n    static getUndefinedString() {return Chess.results()[Chess.result_names().findIndex(v => v === 'undefined')]}\n    static getWhiteWinString() {return Chess.results()[Chess.result_names().findIndex(v => v === 'white')]}\n    static getBlackWinString() {return Chess.results()[Chess.result_names().findIndex(v => v === 'black')]}\n    static getDrawString() {return Chess.results()[Chess.result_names().findIndex(v => v === 'draw')]}\n\n    static getResultString(game) {\n        if (!game.game_over) {\n            return Chess.getUndefinedString()\n        } else if (game.in_draw)  {\n            return Chess.getDrawString()\n        } else if (game.isCheckMate) {\n            if (game.turn === 'w') {\n                return Chess.getBlackWinString()\n            } else {\n                return Chess.getWhiteWinString()\n            }\n        } else {\n            return Chess.getUndefinedString()\n        }\n    }\n\n    reset(fen = defaultFen) {\n        const v = validateFen(fen)\n        if (!v.valid) throw new Error(v.message)\n        this.__fens__ = [fen]\n        this.__sans__ = ['']\n        this.__headers__ = {\n            Event: 'Internet Game',\n            Site: 'The Cloud, INTERNET',\n            Date: pgnDate(new Date()),\n            Round: '?',\n            White: 'White Player',\n            Black: 'Black Player',\n            Result: Chess.getResultString(this)\n        }\n        if (fen !== defaultFen) {\n            this.headers('FEN', fen, 'SetUp', '1')\n        }\n        return this\n    }\n\n    load(fen) {\n        if (!validateFen(fen).valid) return null\n        this.__fens__ = [fen]\n        this.__sans__ = ['']\n        this.headers('Result', Chess.getResultString(this), 'FEN', fen, 'SetUp', '1')\n        delete this.__headers__.PlyCount\n        return this\n    }\n\n    mini_ascii(fennum, flipped = false, sep = '\\n') {\n        fennum = fennum || this.fens().length - 1\n        return partition(fen2obj(this.fens()[fennum]).fenArray\n            .map((_, i, self) => self[i ^ (flipped ? 7 : 56)])\n            .map(v => v === '0' ? '.' : v), 8)\n            .map(a => a.join(' '))\n            .join(sep)\n    }\n\n    ascii(fennum , flipped = false, sep = '\\n') {\n        const separ = `   +${'---+'.repeat(8)}${sep}`\n        //const empty = `   ${'|   '.repeat(8)}|${sep}`\n        const empty = ''\n        fennum = fennum || this.fens().length - 1\n        const { fenArray } = fen2obj(this.fens()[fennum])\n        const rows = (flipped ? range(0, 7) : range(7, 0, -1)).map(n => (n + 1).toString())\n        const cols = (flipped ? range(7, 0, -1) : range(0, 7)).map(n => String.fromCharCode(n + 97))\n        const bottomLine = cols.reduce((base, el) => base + '  ' + el + ' ', '   ') + ` ${sep}`\n        const showArray = fenArray.map((_, i, self) => self[i ^ (flipped ? 7 : 56)]).map(v => v === '0' ? ' ' : v)\n        const partArray = partition(showArray, 8)\n        const asciiArray = partArray.map((subArr, i) => subArr.reduce((base, el) => base + '| ' + el + ' ', empty + ` ${rows[i]} `) + `|${sep}` + empty + separ)\n\n        return `${separ}${asciiArray.join('')}${bottomLine}`\n    }\n\n    console_view(fennum, flipped = false) {\n        fennum = fennum || this.fens().length - 1\n        console.log(this.ascii(fennum, flipped))\n    }\n\n    clear() {\n        this.__fens__ = [...this.__fens__.slice(0, -1), clear(this.__fens__[this.__fens__.length -1])]\n        return this\n    }\n\n    san_with_number(number, all = false) {\n        if (number < 1 || number > (this.__sans__.length - 1)) return ''\n        const {turn, fullMoveNumber} = fen2obj(this.fens()[number - 1])\n        let prefix\n        if (turn === 'w') {\n            prefix = `${fullMoveNumber}. `\n        } else {\n            prefix = all ? `${fullMoveNumber}. ... ` : ''\n        }\n        const san = this.history()[number - 1]\n\n        return `${prefix}${san}`\n    }\n\n    numbered_history(all = false) {\n        return this.history().map((_, i) => this.san_with_number(i + 1, all))\n    } \n\n    pgn_moves(sep = '\\n', line_break = 16){\n        return partition(this.numbered_history(), line_break)\n        .map(a => a.join(' ')).join(sep) +\n        ' ' + this.headers('Result') + sep\n    }\n\n    pgn_headers(sep = '\\n') {\n        const seven_tags = Chess.sevenTags()\n        const seven_lines = seven_tags.map( tag => `[${tag} \"${this.headers(tag)}\"]`)\n        let others = [] \n        for (let key in this.headers()) {\n            if (typeof seven_tags.find(tag => tag === key) === 'undefined') {\n                others = [...others, key]\n            }\n        }\n        const other_lines = others.map( tag => `[${tag} \"${this.headers(tag)}\"]`).sort()\n        return seven_lines.join(sep) + sep + other_lines.join(sep) + sep + sep\n    }\n\n    pgn(sep = '\\n', line_break = 16) {\n        return `${this.pgn_headers(sep)}${this.pgn_moves(sep, line_break)}`\n    }\n\n    load_pgn(pgn) {\n        const strip_nums = text => text.replace(/\\d+\\.\\s*(\\.\\.\\.)?\\s*/g, '')\n        const is_san = text => sanRegExp.test(text)\n        const is_result = text => !!Chess.results().find(r => r === text)\n\n        const states = [\n            'SCANNING',\n            'LABEL',\n            'VALUE',\n            'TOKEN',\n            'COMMENT',\n            'VARIANT'\n        ]\n\n        let state = 'SCANNING'\n        let prevState = state\n        let label = ''\n        let value = ''\n        let token = ''\n        let current = ''\n        let index = 0\n\n        pgn = strip_nums(pgn).replace(/\\r/g, '\\n')\n        const game = new Chess()\n\n        do {\n            current = pgn[index++]\n\n            switch (state) {\n               case states[0]: //'SCANNING' \n                 if ('[' === current) {\n                     state = 'LABEL'\n                 } else if ('{' === current) {\n                     prev_state = state\n                     state = 'COMMENT'\n                 } else if ('(' === current) {\n                    prevState = state\n                    state = 'VARIANT'\n                 } else if (current.match(/[\\s\\]]/)) {\n                    continue\n                 } else {\n                     prevState = state\n                     state = 'TOKEN'\n                     token = current\n                 }\n                 continue\n               case states[1]: //'LABEL' \n                 if ('\"' === current) {\n                     state = 'VALUE'\n                 } else {\n                    label += current\n                 }\n                 continue\n               case states[2]: //'VALUE' \n                 if (/[\\\"\\]]/.test(current)) {\n                    game.headers(capitalize(label.trim()), value)\n                    if (label.toLowerCase() === 'fen') {\n                        if (!game.load(value)) return false\n                        game.headers('SetUp', '1')\n                    }\n                    label = ''\n                    value = ''\n                    state = 'SCANNING'\n                 } else {\n                     value += current\n                 }\n                 continue\n               case states[3]: //'TOKEN' \n                 if ('{' === current) {\n                     prevState = state\n                     state = 'COMMENT'\n                 } else if ('(' === current) {\n                     prevState = state\n                     state = 'VARIANT'\n                 } else if (current.match(/[\\s\\[]/)) {\n                     if (is_result(token)) {\n                         game.headers('Result', token)\n                     }\n                     if (is_result(token) || current === '[') {\n                        this.__headers__ = game.__headers__\n                        this.__fens__ = game.__fens__\n                        this.__sans__ = game.__sans__\n                        return true\n                     }\n                     if (is_san(token)) {\n                         const result = game.move(token)\n                         if (!result) {\n                             console.log(`${token} move failed to load.`)\n                             return false\n                         }\n                         token = ''\n                         prevState = 'TOKEN'\n                         state = 'SCANNING'\n                     }\n                 } else {\n                     token += current\n                 }\n                 continue\n               case states[4]: //'COMMENT' \n                 if ('}' === current) {\n                    state = prevState\n                 }\n                 continue\n               case states[5]: //'VARIANT' \n                 if (')' === current) {\n                    state = prevState\n                 }\n                 continue\n               default:\n                 continue\n            }\n\n        } while (index < pgn.length)\n\n        this.__headers__ = game.__headers__\n        this.__fens__ = game.__fens__\n        this.__sans__ = game.__sans__\n        return true\n    }\n\n    move(...moveArgs) {\n        const fenObj = fen2obj(this.fen) \n        let sqFrom, sqTo, promotion\n        switch (moveArgs.length) {\n            case 0:\n                return false\n            case 1:\n                if (sanRegExp.test(moveArgs[0])) {\n                    const result = san2args(this.fen, moveArgs[0])\n                    sqFrom = result.sqFrom\n                    sqTo = result.sqTo\n                    promotion = result.promotion\n                } else if (/[a-h][1-8]-?[a-h][1-8][QRNBqrnb]?/.test(moveArgs[0])) {\n                    if (moveArgs[0][moveArgs[0].length - 1].match(/QRNB/i)) {\n                        promotion = moveArgs[0][moveArgs[0].length - 1].toUpperCase()\n                    } else {\n                        promotion = null\n                    }\n                    const moveStr = moveArgs[0].replace(/-/g, '')\n                    sqFrom = sqNumber(moveStr.slice(0,2))\n                    sqTo = sqNumber(moveStr.slice(2,4))\n                }\n                break\n            default:\n                sqFrom = sqNumber(moveArgs[0])\n                sqTo = sqNumber(moveArgs[1])\n                promotion = moveArgs[2]\n        }\n\n        if ((isWhiteFigure(fenObj.fenArray[sqFrom]) && fenObj.turn === 'b') || \n           (isBlackFigure(fenObj.fenArray[sqFrom]) && fenObj.turn === 'w')) return false\n\n        const newFen = tryMove(this.fen, sqFrom, sqTo, promotion)\n        if (!newFen) return false\n        if (!validateFen(newFen).valid) return false\n        const san = args2san(this.fen, sqFrom, sqTo, promotion)\n        const { fenArray, turn, enPassant } = fenObj\n        const [figFrom, figTo] = [fenArray[sqFrom], fenArray[sqTo]]\n        let newSanObj = {san, \n                         piece: figFrom, \n                         color: turn, \n                         from: sq2san(sqFrom), \n                         to: sq2san(sqTo)}\n        if (!isEmptyFigure(figTo)) newSanObj = {...newSanObj, captured: figTo}\n        const isEnPassant = /[Pp]/.test(figFrom) && sqTo === san2sq(enPassant)\n        const isBigPawn = /[Pp]/.test(figFrom) && difRow(sqFrom, sqTo) === 2\n        const isPromotion = (figFrom === 'p' && row(sqTo) === 0) ||\n                            (figFrom === 'P' && row(sqTo) === 7)\n        if (isPromotion) newSanObj = {...newSanObj, promotion: promotion ? \n                                      promotion.toUpperCase() : 'Q'}\n        let flags = ''\n        if ((figFrom === 'K' && sqFrom === 4 && sqTo === 6) || (figFrom === 'k' && sqFrom === 60 && sqTo === 62)) {\n            flags += 'k'\n        } else if ((figFrom === 'K' && sqFrom === 4 && sqTo === 2) || (figFrom === 'k' && sqFrom === 60 && sqTo === 58)) {\n            flags += 'q'\n        }\n        if (isPromotion) {\n            flags += 'p'\n        } else if (isBigPawn) {\n            flags += 'b'\n        }\n        flags += isEnPassant ? 'e' : newSanObj.captured ? 'c' : 'n'\n        \n        this.__sans__ = [...this.__sans__, {...newSanObj, flags}]\n        this.__fens__ = [...this.__fens__, newFen]\n        this.headers('PlyCount', this.history().length.toString(), 'Result', Chess.getResultString(this))\n\n        // setTimeout(() => {\n        // }, 0)\n\n        return this\n    }\n\n    history(options) {\n        return (options && options.verbose) ? \n            this.__sans__.slice(1) :\n            this.__sans__.slice(1).map(obj => obj.san)\n    }\n\n    moves(from = null) {\n        return from ? \n            availableMoves(this.fen).filter(it => it.from === sqNumber(from))\n            .map(it => args2san(this.fen, it.from, it.to, 'Q'))\n            :\n            availableMoves(this.fen).map(it => args2san(this.fen, it.from, it.to, 'Q')) \n    }\n    \n    headers(...args) {\n        if (!args.length) return this.__headers__\n        if (args.length === 1) return this.__headers__[capitalize(args[0])] || 'Header not set'\n        const evenargs = args.length % 2 === 0 ? args : args.slice(0, -1)\n        for (let x = 0; x < evenargs.length; x += 2) {\n            this.__headers__[capitalize(evenargs[x])] = evenargs[x + 1]\n        }\n        return this.__headers__\n    }\n\n    in_check() {return this.isCheck}\n    \n    in_checkmate() {return this.isCheckMate}\n\n    in_stalemate() {return this.isStaleMate}\n\n    get version()  {\n        if (typeof require !== 'undefined') {\n            const v = require('../package.json').version\n            return v ? v : '0.10.3'\n        } else {\n            return '0.10.3'\n        }\n    }\n\n    get turn() {\n        return fen2obj(this.fen).turn\n    }\n\n    get in_fifty_moves_rule() {\n        return parseInt(fen2obj(this.fen).halfMoveClock) >= 100\n    }\n\n    get in_threefold_repetition() {\n        const current = makeFenComparable(this.fen)\n        const groups = groupArray(this.fens().map(makeFenComparable))\n        return groups[current] >= 3\n    }\n\n    get insufficient_material() {\n        return insuficientMaterial(this.fen, 'w') && insuficientMaterial(this.fen, 'b')\n    }\n\n    get in_draw() {\n        return this.in_fifty_moves_rule || this.in_threefold_repetition ||\n               this.insufficient_material || this.isStaleMate\n    }\n\n    get isCheck() {\n        return isCheck(this.fen)\n    }\n\n    get isCheckMate() {\n        return isCheckMate(this.fen)\n    }\n    \n    get isStaleMate() {\n        return isStaleMate(this.fen)\n    }\n    \n    get fen() {\n        return this.__fens__[this.__fens__.length -1]\n    }\n\n    get position() {\n        return fen2obj(this.fen).fenArray\n    }\n\n    get isCheck() {\n        return isCheck(this.fen)\n    }\n\n    get isCheckMate() {\n        return isCheckMate(this.fen)\n    }\n\n    get isStaleMate() {\n        return isStaleMate(this.fen)\n    }\n\n    get game_over() {\n        return this.in_draw || this.isCheckMate\n    }\n\n    get(sq) {\n        return fen2obj(this.fen).fenArray[sqNumber(sq)]\n    }\n\n    put(sq, figure) {\n        if (!/[0pnbrqkPNBRQK]/.test(figure)) return null\n        sq = sqNumber(sq)\n        const obj = fen2obj(this.fen)\n        obj.fenArray[sq] = figure\n        obj.fenString = array2fenString(obj.fenArray)\n        const newFen = obj2fen(obj)\n        this.__fens__ = [...this.__fens__.slice(0, -1), newFen]\n        return this\n    }\n\n    remove(sq) {\n        const figure = this.get(sq)\n        this.put(sq, '0')\n        return figure\n    }\n\n    static validate_fen(fen) {\n        return validateFen(fen)\n    }\n\n    static square_color(sq) {\n        return isLightSquare(sqNumber(sq)) ? 'light' : 'dark'\n    }\n\n    fens() { return this.__fens__}\n\n    undo() {\n        if (this.__fens__.length < 2) return false\n        this.__fens__.splice(this.__fens__.length - 1, this.__fens__.length)\n        this.__sans__.splice(this.__sans__.length - 1, this.__sans__.length)\n        this.headers('PlyCount', this.history().length.toString(), 'Result', Chess.getResultString(this))\n        return this\n    }\n\n    toString() {\n        return this.fen\n    }\n}\n\nconst thisExports = {\n    lpad,\n    rpad,\n    capitalize,\n    groupArray,\n    makeSet,\n    range,\n\n    sanRegExp,\n    pgnTagLineRegExp,\n\n    defaultFen, \n    sicilianFen,\n    scandinavianFen,\n    oddFrenchFen,\n    mateLocoFen,\n    mateAyudadoFen,\n    prePastorFen,\n    pastorFen,\n\n    pgnDate,\n    makeFenComparable,\n    fen2obj,\n    obj2fen,\n    expandFen,\n    compressFen,\n    fen2array,\n    defaultFenArray,\n    array2fenString,\n    computedFenString,\n    row,\n    col,\n    sq2rowcol,\n    rowcol2sq,\n    col2letter,\n    letter2col,\n    sq2san,\n    san2sq,\n    isBlackFigure,\n    isWhiteFigure,\n    isEmptyFigure,\n    isDarkSquare,\n    isLightSquare,\n    difRow,\n    difCol,\n    isSameRow,\n    isSameCol,\n    isDiagonal,\n    isAntiDiagonal,\n    isKingReach,\n    path,\n    innerPath,\n    isForward,\n    kingSq,\n    isClearPath,\n    isPawnMove,\n    isPawnAttack,\n    isCastling,\n    isKingMove,\n    isBishopMove,\n    isRookMove,\n    isQueenMove,\n    army,\n    wBishops,\n    wBishopsD,\n    wBishopsD,\n    wKings,\n    wKnights,\n    wPawns,\n    wQueens,\n    wRooks,\n    bBishops,\n    bBishopsD,\n    bBishopsL,\n    bKings,\n    bKnights,\n    bPawns,\n    bQueens,\n    bRooks,\n    wArmy,\n    bArmy,\n    wAttackers,\n    bAttackers,\n    wAttacks,\n    bAttacks,\n    wPMoves,\n    bPMoves,\n    isFriend,\n    isFoe,\n    getFigure,\n    getFigures,\n    attacksFromSq,\n    attacksOnSq,\n    checksTo,\n    isCheck,\n    isCheckMate,\n    isStaleMate   ,\n    canKingMove,\n    canMove,\n    candidateMoves,\n    availableMoves,\n    validateFen,\n    tryMove,\n    stripSan, \n    args2san,\n    san2args,\n    clear,\n    insuficientMaterial,\n    Chess,\n}\n\nconst cf = thisExports\n\n/*\n\ntry {\n    export default thisExports\n}\ncatch(e) {\n    console.log(`EXPORT (1) ERROR: ${e.message}`)\n}\n\n*/\n\nif (typeof window !== 'undefined') {\n    window.Chess = Chess\n}\n\nif (typeof global !== 'undefined') {\n    global.Chess = Chess\n}\n\ntry {\n    if (typeof module !== 'undefined') {\n        module.exports = Chess\n    } else {\n        const exports = Chess\n    }\n}\ncatch(e) {\n    console.log(`EXPORT (2) ERROR: ${e.message}`)\n}\n\n/*\ntry {\n    if (window) window.base_chess_functions = this.exports\n}\ncatch(e) {\n    console.log(`WINDOW ERROR: ${e.message}`)\n}\n\n*/"]}