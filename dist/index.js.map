{"version":3,"sources":["index.js"],"names":["groupArray","arr","reduce","base","x","makeSet","b","el","find","el2","range","start","end","step","chessboard","sanRegExp","pgnTagLineRegExp","defaultFen","sicilianFen","scandinavianFen","oddFrenchFen","mateLocoFen","mateAyudadoFen","prePastorFen","pastorFen","preWCastlingFen","preBCastlingFen","simpleFen","simpleRookMate","simpleRookCheck","complexRookMate","testFen1","testFen2","fen2obj","fen","split","fenString","turn","castling","enPassant","halfMoveClock","fullMoveNumber","fenArray","fen2array","obj2fen","fenObj","values","join","expandFen","replace","d","repeat","parseInt","compressFen","z","length","toString","test","map","_","i","self","defaultFenArray","array2fenString","v","computedFenString","sq2san","sq","String","fromCharCode","col","row","san2sq","san","rowcol2sq","charCodeAt","sqNumber","isNaN","Math","floor","col2letter","c","letter2col","l","sq2rowcol","r","isBlackFigure","fig","isWhiteFigure","isEmptyFigure","isDarkSquare","constructor","name","isLightSquare","difRow","sq1","sq2","abs","difCol","isSameRow","isSameCol","isDiagonal","isAntiDiagonal","isKnightJump","isKingReach","rowStep","colStep","diagStep","antiDiagStep","path","innerPath","pth","slice","isForward","sqFrom","sqTo","arrayFromFen","kingSq","colour","findIndex","isClearPath","fenArr","iPath","isBishopMove","isRookMove","isQueenMove","isKingMove","isPawnMove","toLowerCase","isPawnAttack","isCastling","army","ret","bPawns","bKnights","bBishops","bRooks","bQueens","bKings","wPawns","wKnights","wBishops","wRooks","wQueens","wKings","wArmy","bArmy","wAttackers","bAttackers","wAttacks","a","attacksFromSq","a1","a2","concat","bAttacks","wPMoves","p","filter","n","canMove","bPMoves","isFriend","fig1","fig2","isFoe","getFigure","getFigures","obj","el1","filterFunc","candidatesArr","attacksOnSq","s","some","s2","checksTo","foe","isCheck","isCheckMate","availableMoves","isStaleMate","isCheckMateOld","friend","kSq","cands","candidateMoves","kingMoves","it","checks","remaining","checkPath","filtered","duo","pair","newPair","newFen","tryMove","validateFen","valid","canKingMove","king","pathToCheck","sanSqTo","figOrigen","figDestino","retArr","item","from","to","code","message","promotion","figFrom","figTo","newArray","toUpperCase","stripSan","san2args","fenobj","colOrig","extraInfo","rowOrColFunc","geoInfo","candids","reals","newfen","args2san","figure","extrainfo","capture","destiny","promotionFigure","check","attacks","fig_from_attacks","valids","otherfen","makeFenComparable","Chess","reset","__fens__","__sans__","result","newSanObj","piece","color","captured","isEnPassant","isBigPawn","isPromotion","flags","setTimeout","options","verbose","current","groups","fens","splice","thisExports","cf","window","global","module","exports","e","console","log"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["\"use strict\";\n\nconst groupArray = arr => {\n    return arr.reduce((base, x) => {\n        if (x in base) {\n            base[x] += 1\n        } else {\n            base[x] = 1\n        }\n        return base\n    }, {})\n}\n\nconst makeSet = arr => arr.reduce((b, el) => b.find(el2 => el2 === el) ? b : [...b, el], [])\n\nconst range = (start = 0, end = 9, step = 1) => {\n    if (start === end) {\n        return [start]\n    }\n\n    if (!step) {\n        if (start < end) {\n            step = 1\n        } else {\n            step = -1\n        }\n    }\n\n    if (start > end && step > 0) {\n        return []\n    }\n\n    if (start < end && step < 0) {\n        return []\n    }\n\n    return [start, ...range(start + step, end, step)]\n}\n\nconst chessboard = range(0, 63)\n\nconst sanRegExp = /(?:(^0-0-0|^O-O-O)|(^0-0|^O-O)|(?:^([a-h])(?:([1-8])|(?:x([a-h][1-8])))(?:=?([NBRQ]))?)|(?:^([NBRQK])([a-h])?([1-8])?(x)?([a-h][1-8])))(?:(\\+)|(#)|(\\+\\+))?$/\nconst pgnTagLineRegExp = /^\\s*\\[\\s*(.+?)\\s+\"(.+?)\"\\s*\\]\\s*$/\n\nconst defaultFen = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\nconst sicilianFen = 'rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 1'\nconst scandinavianFen = 'rnbqkbnr/ppp1pppp/8/3p4/4P3/8/PPPP1PPP/RNBQKBNR w KQkq d6 0 2'\nconst oddFrenchFen = 'rnbqkbnr/ppp2ppp/4p3/3pP3/8/8/PPPP1PPP/RNBQKBNR w KQkq d6 0 3'\nconst mateLocoFen = 'rnb1kbnr/pppp1ppp/8/4p3/6Pq/5P2/PPPPP2P/RNBQKBNR w KQkq - 1 3'\nconst mateAyudadoFen = 'r1bqnNnr/pppkpp1p/7R/3p4/8/8/PPPPPPP1/RNBQKBN1 b Q - 0 6'\nconst prePastorFen = 'r1bqkb1r/pppp1ppp/2n2n2/4p2Q/2B1P3/8/PPPP1PPP/RNB1K1NR w KQkq - 4 4'\nconst pastorFen = 'r1bqkb1r/pppp1Qpp/2n2n2/4p3/2B1P3/8/PPPP1PPP/RNB1K1NR b KQkq - 0 4'\nconst preWCastlingFen = 'rnbqk2r/pppp1ppp/5n2/2b1p3/2B1P3/5N2/PPPP1PPP/RNBQK2R w KQkq - 4 4'\nconst preBCastlingFen = 'rnbqk2r/pppp1ppp/5n2/2b1p3/2B1P3/5N2/PPPP1PPP/RNBQ1RK1 b kq - 5 4'\nconst simpleFen = '7k/7P/7K/8/8/8/8/8 w - - 0 1'\nconst simpleRookMate = 'R6k/6pp/8/8/3n4/8/8/7K b - - 0 1'\nconst simpleRookCheck = 'R6k/6pp/8/8/3r4/8/8/7K b - - 0 1'\nconst complexRookMate = 'R6k/6qp/5B2/8/8/8/8/7K b - - 0 1'\nconst testFen1 = '8/6B1/6p1/R6k/7p/8/8/K5R1 b KQkq - 0 1'\nconst testFen2 = '8/5BB1/6p1/R6k/7p/8/8/K5R1 b KQkq - 0 1'\n\nconst fen2obj = fen => {\n    const arr = fen.split(/\\s+/)\n    return {\n        fenString: arr[0],\n        turn: arr[1],\n        castling: arr[2],\n        enPassant: arr[3],\n        halfMoveClock: arr[4],\n        fullMoveNumber: arr[5],\n        fenArray: fen2array(arr[0])\n    }\n}\n\nconst obj2fen = fenObj => {\n    delete fenObj.fenArray\n    return values(fenObj).join(' ')\n}\n\nconst expandFen = fen => fen.replace(/\\//g, '').replace(/[1-8]/g, d => ('0').repeat(parseInt(d)))\n\nconst compressFen = fen => fen.replace(/(.{8})(?!$)/g, \"$1/\").replace(/0+/g, z => z.length.toString())\n\nconst fen2array = fen => {\n    if (/^(.+\\/){7}.+$/.test(fen)) {\n        fen = expandFen(fen)\n    } else if (fen.length !== 64) {\n        return []\n    }\n    return fen.split('').map((_, i, self) => self[i ^ 56])\n}\n\nconst defaultFenArray = fen2array(fen2obj(defaultFen).fenString)\n\nconst array2fenString = arr => compressFen(arr.map((v, i) => arr[i ^56]).join(''))\n\nconst computedFenString = array2fenString(defaultFenArray)\n\nconst sq2san = sq => sq >= 0 && sq < 64 ? \n                     `${String.fromCharCode(97 + col(sq))}${String.fromCharCode(49 + row(sq))}` :\n                     '-'\n\nconst san2sq = san => /[a-h][1-8]/.test(san) ? \n                      rowcol2sq(san.charCodeAt(1) -49, san.charCodeAt(0) - 97) :\n                      -1\n\nconst sqNumber = sq => isNaN(sq) ? san2sq(sq) : parseInt(sq)\n\nconst row = sq => Math.floor(sqNumber(sq) / 8)\n\nconst col = sq => sqNumber(sq) % 8\n\nconst col2letter = c => String.fromCharCode(97 + c)\n\nconst letter2col = l => l.charCodeAt(0) - 97\n\nconst sq2rowcol = sq => ({row: row(sq), col: col(sq)})\n\nconst rowcol2sq = (r, c) => r * 8 + c\n\nconst isBlackFigure = fig => /[pnbrqk]/.test(fig)\n\nconst isWhiteFigure = fig => /[PNBRQK]/.test(fig)\n\nconst isEmptyFigure = fig => fig === '0'\n\nconst isDarkSquare = sq => {\n    if (sq.constructor.name === 'String') {\n        sq = san2sq(sq)\n    }\n    return (row(sq) % 2 === 0 && col(sq) % 2 === 0) || (row(sq) % 2 !== 0 && col(sq) % 2 !== 0)\n}\n\nconst isLightSquare = sq => !isDarkSquare(sq)\n\nconst difRow = (sq1, sq2) => Math.abs(row(sq1) - row(sq2))\n\nconst difCol = (sq1, sq2) => Math.abs(col(sq1) - col(sq2))\n\nconst isSameRow = (sq1, sq2) => difRow(sq1, sq2) === 0\n\nconst isSameCol = (sq1, sq2) => difCol(sq1, sq2) === 0\n\nconst isDiagonal = (sq1, sq2) => difCol(sq1, sq2) === difRow(sq1, sq2)\n\nconst isAntiDiagonal = (sq1, sq2) => difCol(sq1, sq2) === difRow(sq1, sq2) && \n                                     Math.abs(sqNumber(sq1) - sqNumber(sq2)) % 7 === 0 &&\n                                     sqNumber(sq1) !== 63 &&\n                                     sqNumber(sq2) !== 63\n\nconst isKnightJump = (sq1, sq2) => (difCol(sq1, sq2) === 2  && difRow(sq1, sq2) === 1) ||\n                                   (difCol(sq1, sq2) === 1  && difRow(sq1, sq2) === 2) \n\nconst isKingReach = (sq1, sq2) => difCol(sq1, sq2) < 2 && difRow(sq1, sq2) < 2\n\nconst rowStep = 1\nconst colStep = 8\nconst diagStep = 9\nconst antiDiagStep = 7\n\nconst path = (sq1, sq2) => {\n    let step\n    if (sq1 === sq2) {\n        return [sqNumber(sq1)]\n    } else if (isSameCol(sq1, sq2)) {\n        if (sqNumber(sq1) < sqNumber(sq2)) {\n            step = colStep\n        } else {\n            step = -colStep\n        }\n    } else if (isSameRow(sq1, sq2)) {\n        if (sqNumber(sq1) < sqNumber(sq2)) {\n            step = rowStep\n        } else {\n            step = -rowStep\n        }\n    } else if (isAntiDiagonal(sq1, sq2)) {\n        if (sqNumber(sq1) < sqNumber(sq2)) {\n            step = antiDiagStep\n        } else {\n            step = -antiDiagStep\n        }\n    } else if (isDiagonal(sq1, sq2)) {\n        if (sqNumber(sq1) < sqNumber(sq2)) {\n            step = diagStep\n        } else {\n            step = -diagStep\n        }\n    } else if (isKnightJump(sq1, sq2)) {\n        return [sqNumber(sq1), sqNumber(sq2)]\n    } else {\n        return []\n    }\n    return range(sqNumber(sq1), sqNumber(sq2), step)\n}\n\nconst innerPath = pth => pth.slice(1, -1)\n\nconst isForward = (fig, sqFrom, sqTo) => isBlackFigure(fig) ? \n                  row(sqFrom) > row(sqTo) : \n                  row(sqFrom) < row(sqTo)\n\nconst arrayFromFen = fen => {\n    if (fen.constructor.name === 'Array') {\n        return fen\n    } else if (!(fen.constructor.name === 'String')) {\n        return []\n    } else {\n        if (/\\s+/.test(fen)) {\n            return fen2obj(fen).fenArray\n        } else {\n            return fen2array(fen)\n        }\n    }\n}\n\nconst kingSq = (fen, colour) => arrayFromFen(fen).findIndex( x => x === (/[a-z]/.test(colour) && colour !== 'w' ? 'k' : 'K'))\n\nconst isClearPath = (fen, pth) => {\n    if  (pth.length < 3) {\n        return true\n    }\n\n    const fenArr = arrayFromFen(fen)\n    const iPath = innerPath(pth)\n\n    for (let v of iPath) {\n        if (fenArr[v] !== '0') {\n            return false\n        }\n    }\n\n    return true\n}\n\nconst isBishopMove = (sqFrom, sqTo) => isDiagonal(sqFrom, sqTo) && sqFrom !== sqTo\n\nconst isRookMove = (sqFrom, sqTo) => (isSameRow(sqFrom, sqTo) || isSameCol(sqFrom, sqTo)) && sqFrom !== sqTo\n\nconst isQueenMove = (sqFrom, sqTo) => (isBishopMove(sqFrom, sqTo) || isRookMove(sqFrom, sqTo)) && sqFrom !== sqTo\n\nconst isKingMove = (sqFrom, sqTo) => difRow(sqNumber(sqFrom), sqNumber(sqTo)) < 2 &&  \n                                     difCol(sqNumber(sqFrom), sqNumber(sqTo)) < 2 &&\n                                     sqFrom !== sqTo\n\nconst isPawnMove = (sqFrom, sqTo, colour = 'w') => {\n    colour = colour.toLowerCase()\n    if (!/[wb]/.test(colour)) {\n        return false\n    }\n    const fig = colour === 'w' ? 'P' : 'p'\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    if (!isForward(fig, sqFrom, sqTo)) {\n        return 0\n    }\n\n    if (fig === 'P') {\n        if (sqTo === (sqFrom + 8)) return 1\n        if (sqTo === (sqFrom + 16) && row(sqFrom) === 1) return 2\n        return 0\n    } else {\n        if (sqTo === (sqFrom - 8)) return 1\n        if (sqTo === (sqFrom - 16) && row(sqFrom) === 6) return 2\n        return 0\n    }\n}\n\nconst isPawnAttack = (sqFrom, sqTo, colour = 'w') => {\n    colour = colour.toLowerCase()\n    if (!/[wb]/.test(colour)) {\n        return false\n    }\n    const fig = colour === 'w' ? 'P' : 'p'\n    if (!isForward(fig, sqFrom, sqTo)) {\n        return false\n    }\n    if (difCol(sqFrom, sqTo) !== 1) return false\n    if (difRow(sqFrom, sqTo) !== 1) return false\n    return true\n}\n\nconst isCastling = (sqFrom, sqTo, colour = 'w') => {\n    colour = colour.toLowerCase()\n    if (!/[wb]/.test(colour)) {\n        return false\n    }\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    if (colour === 'w') {\n        return sqFrom === 4 && (sqTo === 2 || sqTo === 6)\n    } else {\n        return sqFrom === 60 && (sqTo === 58 || sqTo === 62)\n    }\n}\n\nconst army = (fen, fig) => {\n    const fenArr = fen2array(fen)\n    let ret = []\n    for (let v of chessboard) {\n        if (fenArr[v] === fig) {\n            ret = [...ret, v]\n        }\n    }\n    return ret\n}\n\nconst bPawns = fen => army(fen, 'p')\nconst bKnights = fen => army(fen, 'n')\nconst bBishops = fen => army(fen, 'b')\nconst bRooks = fen => army(fen, 'r')\nconst bQueens = fen => army(fen, 'q')\nconst bKings = fen => army(fen, 'k')\n\nconst wPawns = fen => army(fen, 'P')\nconst wKnights = fen => army(fen, 'N')\nconst wBishops = fen => army(fen, 'B')\nconst wRooks = fen => army(fen, 'R')\nconst wQueens = fen => army(fen, 'Q')\nconst wKings = fen => army(fen, 'K')\n\nconst wArmy = fen => [\n    ...wPawns(fen), \n    ...wKnights(fen), \n    ...wBishops(fen),\n    ...wRooks(fen),\n    ...wQueens(fen),\n    ...wKings(fen),\n]\n\nconst bArmy = fen => [\n    ...bPawns(fen), \n    ...bKnights(fen), \n    ...bBishops(fen),\n    ...bRooks(fen),\n    ...bQueens(fen),\n    ...bKings(fen),\n]\n\nconst wAttackers = fen => [\n    ...wKnights(fen), \n    ...wBishops(fen),\n    ...wRooks(fen),\n    ...wQueens(fen),\n]\n\nconst bAttackers = fen => [\n    ...bKnights(fen), \n    ...bBishops(fen),\n    ...bRooks(fen),\n    ...bQueens(fen),\n]\n\nconst wAttacks = fen => wAttackers(fen).map(a => attacksFromSq(fen, a)).reduce((a1, a2) => a1.concat(a2), [])\nconst bAttacks = fen => bAttackers(fen).map(a => attacksFromSq(fen, a)).reduce((a1, a2) => a1.concat(a2), [])\n\nconst wPMoves = fen => wPawns(fen).map(p => chessboard.filter(n => canMove(fen, p, n)))\n                       .reduce((a1, a2) => a1.concat(a2))   \n\nconst bPMoves = fen => bPawns(fen).map(p => chessboard.filter(n => canMove(fen, p, n)))\n                       .reduce((a1, a2) => a1.concat(a2))   \n\nconst isFriend = (fig1, fig2) => (isBlackFigure(fig1) && isBlackFigure(fig2)) || (isWhiteFigure(fig1) && isWhiteFigure(fig2))\nconst isFoe = (fig1, fig2) => (isBlackFigure(fig1) && isWhiteFigure(fig2)) || (isWhiteFigure(fig1) && isBlackFigure(fig2))\n\nconst getFigure = (fen, sq) => arrayFromFen(fen)[sqNumber(sq)]\n\nconst getFigures = (fen, path) => path.map( n => {\n    const obj = {}\n    obj[n] = getFigure(fen, n)\n    return obj\n}).reduce((el1, el2) => ({...el1, ...el2}), {})\n\nconst attacksFromSq = (fen, sq) => {\n    const fenArr = arrayFromFen(fen)\n    sq = sqNumber(sq)\n    const fig = fenArr[sq]\n    if (isEmptyFigure(fig)) return []\n    let filterFunc\n\n    switch (fig.toLowerCase()) {\n        case 'n':\n            filterFunc = isKnightJump\n            break\n        case 'b':\n            filterFunc = isBishopMove\n            break\n        case 'r':\n            filterFunc = isRookMove\n            break\n        case 'q':\n            filterFunc = isQueenMove\n            break\n        case 'k':\n            filterFunc = isKingMove\n            break\n        default: \n            return fig === 'p' ? [sq - 7, sq - 9] : [sq + 7, sq + 9]\n        }\n\n        const candidatesArr = chessboard.filter( n => filterFunc(sq, n))\n\n        return candidatesArr.filter(n => isClearPath(fenArr, path(sq, n)))\n}\n\nconst attacksOnSq = (fen, sq, colour = 'w') => {\n    colour = colour.toLowerCase()\n    if (!/[wb]/.test(colour)) {\n        return null\n    }\n\n    sq = sqNumber(sq)\n\n    const army = colour === 'w' ? wArmy(fen) : bArmy(fen)\n    // console.log(\"Army:\\n\", army)\n\n    return army.filter(s => attacksFromSq(fen, s).some(s2 => s2 === sq))\n}\n\nconst checksTo = (fen, colour = 'w') => {\n    const foe = colour.toLowerCase() === 'w' ? 'b' : 'w'\n    return attacksOnSq(fen, kingSq(fen, colour.toLowerCase()), foe)\n}\n\nconst isCheck = fen => checksTo(fen, fen2obj(fen).turn).length > 0\n\nconst isCheckMate = fen => isCheck(fen) && availableMoves(fen).length === 0\n\nconst isStaleMate = fen => !isCheck(fen) && availableMoves(fen).length === 0\n\nconst isCheckMateOld = fen => {\n    if (!isCheck(fen)) return false\n    const { turn } = fen2obj(fen)\n    const [friend, foe, kSq] = turn === 'w' ? ['w', 'b', kingSq(fen, 'w')] : ['b', 'w', kingSq(fen, 'b')]\n    const cands = candidateMoves(fen)\n    //console.log(`Candidates: ${JSON.stringify(cands)}`)\n    const kingMoves = cands.find(it => it[0] === kSq)[1]\n    if (kingMoves.length > 0) return false\n    const checks = checksTo(fen, friend)\n    if (checks.length > 1) return true\n    const remaining = cands.filter(it => it[0] !== kSq)\n    //console.log(`Remaining moves: ${JSON.stringify(remaining)}`)\n    const  checkPath = path(checks[0], kSq).filter(n => n !== kSq)\n    //console.log(`Check path: ${JSON.stringify(checkPath)}`)\n    const filtered = remaining.filter( duo => duo[1].some(n => checkPath.find(pth => pth === n)))\n    //console.log(`Filtered: ${JSON.stringify(filtered)}`)\n    if (filtered.length > 0) {\n        for (let pair of filtered) {\n            const newPair = [pair[0], pair[1].filter(v => checkPath.find(n => n === v))]\n            //console.log(`New Pair: ${JSON.stringify(newPair)}`)\n            for (let v of pair[1]) {\n                //console.log(`pair[0]: ${pair[0]} , v: ${v}`)\n                const newFen = tryMove(fen, pair[0], v, 'Q')\n                //console.log(`newFen: ${newFen}`)\n                if (newFen && validateFen(newFen).valid) return false\n            }\n        }\n    }\n\n    return true\n}\n\nconst canKingMove = (fen, sqFrom, sqTo, king) => {\n    const {castling, turn, fenArray} = fen2obj(fen)\n    const friend = king === 'k' ? 'b' : 'w'\n    const foe = king === 'k' ? 'w' : 'b'\n\n    //console.log(`Castling: ${castling}, turn: ${turn}, friend: ${friend}, foe: ${foe}`)\n    if(isKingMove(sqFrom, sqTo)) {\n        return attacksOnSq(fen, sqTo, foe).length === 0\n    } else if (isCastling(sqFrom, sqTo, friend)) {\n        //console.log(`IsCastling: ${sqFrom}, ${sqTo}`)\n        if (!isEmptyFigure(fenArray[sqTo])) {\n            //console.log('Aledgely square ', sqTo, ' is not empty')\n            return false\n        }\n        let pathToCheck\n        switch (sqTo) {\n            case 6:\n                if (!/K/.test(castling)) return false\n                pathToCheck = path(4, 6)\n                break\n            case 2:\n                if (!/Q/.test(castling)) return false\n                pathToCheck = path(4, 2)\n                break\n            case 62:\n                if (!/k/.test(castling)) return false\n                pathToCheck = path(60, 62)\n                break\n            case 58:\n                if (!/q/.test(castling)) return false\n                pathToCheck = path(60, 58)\n                break\n            default:\n                return false\n        }\n        //console.log(\"!pathToCheck.map(s => attacksOnSq(fen, s, foe)).some(a => a.length > 0)\",\n        !pathToCheck.map(s => attacksOnSq(fen, s, foe)).some(a => a.length > 0)\n        return !pathToCheck.map(s => attacksOnSq(fen, s, foe)).some(a => a.length > 0)\n    } else {\n        return false\n    }\n}\n\n\nconst canMove = (fen, sqFrom, sqTo) => {\n    if (path(sqFrom, sqTo).length < 2 ) {\n        return false\n    }\n    if (!isClearPath(fen, path(sqFrom, sqTo))) {\n        return false\n    }\n\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    const sanSqTo = sq2san(sqTo)\n    const fenObj = fen2obj(fen)\n    const {fenArray, enPassant} = fenObj\n    const figOrigen = fenArray[sqFrom]\n\n    if (figOrigen === '0') {\n        return false\n    }\n\n    const figDestino = fenArray[sqTo]\n\n    if (isFriend(figOrigen, figDestino)) {\n        return false\n    }\n\n    switch(figOrigen) {\n        case 'p':\n            //console.log(`Testing move from ${sqFrom} to ${sqTo} for black pawn`)\n            if (isPawnMove(sqFrom, sqTo, 'b') && !isEmptyFigure(figDestino)) return false\n            if (isPawnAttack(sqFrom, sqTo, 'b') && !isWhiteFigure(figDestino) && sanSqTo !== enPassant) return false\n            if (!isPawnMove(sqFrom, sqTo, 'b') && !isPawnAttack(sqFrom, sqTo, 'b')) return false\n            break\n        case 'P':\n            //console.log(`Testing move from ${sqFrom} to ${sqTo} for white pawn`)\n            if (isPawnMove(sqFrom, sqTo, 'w') && !isEmptyFigure(figDestino)) return false\n            if (isPawnAttack(sqFrom, sqTo, 'w') && !isBlackFigure(figDestino) && sanSqTo !== enPassant) return false\n            if (!isPawnMove(sqFrom, sqTo, 'w') && !isPawnAttack(sqFrom, sqTo, 'w')) return false\n            break\n        case 'K':\n        case 'k':\n            return canKingMove(fen, sqFrom, sqTo, figOrigen)\n            break\n        case 'q':\n        case 'Q':\n            if (!isQueenMove(sqFrom, sqTo)) return false\n            break\n        case 'r':\n        case 'R':\n            if (!isRookMove(sqFrom, sqTo)) return false\n            break\n        case 'b':\n        case 'B':\n            if (!isBishopMove(sqFrom, sqTo)) return false\n            break\n        case 'n':\n        case 'N':\n            if (!isKnightJump(sqFrom, sqTo)) return false\n            break\n        default:\n            return false\n    }\n\n    return true\n}\n \nconst candidateMoves = fen => {\n  const {fenArray, turn, castling, enPassant} = fen2obj(fen)\n  const army = turn === 'w' ? wArmy(fen) : bArmy(fen)\n  return army.map(sq => [sq, chessboard.filter(n => canMove(fen, sq, n))])\n}\n\nconst availableMoves = fen => {\n    let retArr = []\n    for (let item of candidateMoves(fen)) {\n        for (let sq of item[1]) {\n            const newFen = tryMove(fen, item[0], sq, 'Q')\n            if (newFen && validateFen(newFen).valid) retArr = [...retArr, {from: item[0], to: sq}]\n        }\n    }\n    return retArr\n}\n\nconst validateFen = fen => {\n    const {fenArray, turn} = fen2obj(fen)\n    if (fenArray.filter(fig => fig === 'k').length !== 1) {\n        return {valid: false, code: 2, message: 'There must be one and only one black king'}\n    }\n    if (fenArray.filter(fig => fig === 'K').length !== 1) {\n        return {valid: false, code: 3, message: 'There must be one and only one white king'}\n    }\n    if (checksTo(fen, turn === 'w' ? 'b' : 'w').length > 0) {\n        return {valid: false, code: 1, message: `The ${turn === 'b' ? 'white' : 'black'} side is in check, while it's not its turn to move`}\n    }\n    return {valid: true, code: 0, message: 'OK'}\n}\n\nconst tryMove = (fen, sqFrom, sqTo, promotion = 'Q') => {\n    if (!fen || fen.constructor.name !== 'String') return false\n    if (!canMove(fen, sqFrom, sqTo)) return false\n    let {fenArray, turn, castling, enPassant, halfMoveClock, fullMoveNumber} = fen2obj(fen)\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    const [figFrom, figTo] = [fenArray[sqFrom], fenArray[sqTo]]\n    let newArray = [...fenArray]\n\n    newArray[sqFrom] = '0'\n    if (figFrom === 'P' && row(sqTo) === 7) {\n        newArray[sqTo] = promotion ? promotion.toUpperCase() : 'Q'\n    } else if (figFrom === 'p' && row(sqTo) === 0) {\n        newArray[sqTo] = promotion ? promotion.toLowerCase() : 'q'\n    } else {\n        newArray[sqTo] = figFrom\n    }\n    if (figFrom === 'P' && sq2san(sqTo) === enPassant) {\n        newArray[sqTo - 8] = '0'\n    } else if (figFrom === 'p' && sq2san(sqTo) === enPassant) {\n        newArray[sqTo + 8] = '0'\n    }\n\n    if (figFrom === 'K' && sqFrom === 4 && sqTo === 6) {\n        newArray[5] = 'R'\n        newArray[7] = '0'\n    } else if (figFrom === 'K' && sqFrom === 4 && sqTo === 2) {\n        newArray[3] = 'R'\n        newArray[0] = '0'\n    } else if (figFrom === 'k' && sqFrom === 60 && sqTo === 62) {\n        newArray[61] = 'r'\n        newArray[63] = '0'\n    } else if (figFrom === 'k' && sqFrom === 60 && sqTo === 58) {\n        newArray[59] = 'r'\n        newArray[56] = '0'\n    }   \n\n    if (sqFrom === 4) castling = castling.replace('K', '').replace('Q', '')\n    if (sqFrom === 60) castling = castling.replace('k', '').replace('q', '')\n\n    if (sqFrom === 7) castling = castling.replace('K', '')\n    if (sqFrom === 0) castling = castling.replace('Q', '')\n\n    if (sqFrom === 63) castling = castling.replace('k', '')\n    if (sqFrom === 56) castling = castling.replace('q', '')\n\n    if (castling === '') castling = '-'\n\n    turn = turn === 'w' ? 'b' : 'w'\n\n    if (figFrom === 'P' && isPawnMove(sqFrom, sqTo, 'w') === 2) {\n        enPassant = sq2san(sqTo - 8)\n    } else if (figFrom === 'p' && isPawnMove(sqFrom, sqTo, 'b') === 2) {\n        enPassant = sq2san(sqTo + 8)\n    } else {\n        enPassant = '-'\n    }\n\n    if (figFrom !== 'P' && figFrom !== 'p' && figTo === '0') {\n        halfMoveClock = parseInt(halfMoveClock) + 1\n    } else {\n        halfMoveClock = '0'\n    }\n\n    fullMoveNumber = turn === 'w' ? parseInt(fullMoveNumber) + 1 : fullMoveNumber\n\n    const fenString = array2fenString(newArray)\n\n    return `${fenString} ${turn} ${castling} ${enPassant} ${halfMoveClock} ${fullMoveNumber}`\n}\n\nconst stripSan = san => san.replace(/[+#=x]/g, '')\n\nconst san2args = (fen, san) => {\n    const fenobj = fen2obj(fen)\n    san = stripSan(san)\n    if (san === '0-0' || san === 'O-O') {\n        if (fenobj.turn === 'w') {\n            return {sqFrom: 4, sqTo: 6, promotion: null}\n        } else {\n            return {sqFrom: 60, sqTo: 62, promotion: null}\n        }\n    }\n\n    if (san === '0-0-0' || san === 'O-O-O') {\n        if (fenobj.turn === 'w') {\n            return {sqFrom: 4, sqTo: 2, promotion: null}\n        } else {\n            return {sqFrom: 60, sqTo: 58, promotion: null}\n        }\n    }\n\n    let sqFrom, sqTo, promotion, army\n\n    if (/[a-h]/.test(san[0])) {\n        const colOrig = letter2col(san[0])\n        if (/[1-8]/.test(san[1])) {\n           sqTo = sqNumber(san.slice(0, 2))\n        } else {\n           sqTo = sqNumber(san.slice(1, 3))\n        }\n        army = fenobj.turn === 'w' ? wPawns(fen) : bPawns(fen) \n        sqFrom = army.find(n => col(n) === colOrig && canMove(fen, n, sqTo)) || -1\n        if (/[QNRBqnrb]/.test(san[san.length - 1])) {\n            promotion = san[san.length - 1]\n        } else {\n            promotion = null\n        }\n        return {sqFrom, sqTo, promotion}\n    } else if (isWhiteFigure(san[0]) && san[0] !== 'P') {\n        promotion = null\n        const fig = san[0]\n        switch (fig) {\n            case 'N':\n                army = fenobj.turn === 'w' ? wKnights(fen) : bKnights(fen)\n                break\n            case 'B':\n                army = fenobj.turn === 'w' ? wBishops(fen) : bBishops(fen)\n                break\n            case 'R':\n                army = fenobj.turn === 'w' ? wRooks(fen) : bRooks(fen)\n                break\n            case 'Q':\n                army = fenobj.turn === 'w' ? wQueens(fen) : bQueens(fen)\n                break\n            case 'K':\n                army = fenobj.turn === 'w' ? wKings(fen) : bKings(fen)\n                break\n            }\n        sqTo = san2sq(san.slice(san.length - 2, san.length))\n        if (san.length === 5) {\n            sqFrom = san2sq(san.slice(1, 3))\n        } else if (san.length === 4) {\n          const extraInfo = san[1]\n          const [rowOrColFunc, geoInfo] = /[1-8]/.test(extraInfo) ? \n                                          [row, parseInt(extraInfo) - 1] : \n                                          [col, letter2col(extraInfo)]\n          sqFrom = army.find(n => rowOrColFunc(n) === geoInfo && canMove(fen, n, sqTo)) || -1\n        } else {\n            const candids = army.filter(n => canMove(fen, n, sqTo))\n            switch (candids.length) {\n                case 0:\n                    sqFrom = -1\n                    break\n                case 1:\n                    sqFrom = candids[0]\n                    break\n                default:\n                    const reals = candids.filter(sq => {\n                        const newfen = tryMove(fen, sq, sqTo, null)\n                        return newfen && validateFen(newfen).valid\n                    })\n                    // console.log(\"Hay \" + reals.length + \" jugada/s para elegir\")\n                    sqFrom  = reals.length === 1 ? reals[0] : -1              \n            } \n        }\n        return {sqFrom, sqTo, promotion}\n    } else {\n        return {sqFrom: -1, sqTo: -1, promotion: null}\n    }\n}\n\nconst args2san = (fen, sqFrom, sqTo, promotion) => {\n    const {fenArray, turn, enPassant, castling} = fen2obj(fen)\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    const [figFrom, figTo] = [fenArray[sqFrom], fenArray[sqTo]]\n    if (isEmptyFigure(figFrom)) return null\n\n    let figure, extrainfo, capture, destiny, promotionFigure, check\n\n    const newfen = tryMove(fen, sqFrom, sqTo, promotion)\n    if (!(newfen && validateFen(newfen).valid)) return null\n\n    if (isCheckMate(newfen)) {\n        check = '#'\n    } else if (isCheck(newfen)) {\n        check = '+'\n    } else {\n        check = ''\n    }\n\n    if (figFrom === 'K' && sqFrom === 4) {\n        if (sqTo === 6) return `O-O${check}`\n        if (sqTo === 2) return `O-O-O${check}`\n    }\n\n    if (figFrom === 'k' && sqFrom === 60) {\n        if (sqTo === 62) return `O-O${check}`\n        if (sqTo === 58) return `O-O-O${check}`\n    }\n    \n    \n    capture = !isEmptyFigure(figTo) ? 'x' : \n              /[Pp]/.test(figFrom) && sqNumber(enPassant) === sqTo ? 'x' : ''\n    destiny = sq2san(sqTo)\n\n    if (/[Pp]/.test(figFrom)) {\n        figure =  isSameCol(sqFrom, sqTo) ?  '' : col2letter(col(sqFrom))\n        extrainfo = ''\n        if ((row(sqTo) === 7 && figFrom === 'P') || \n           (row(sqTo) === 7 && figFrom === 'P')) {\n            promotionFigure = `=${promotion ? promotion.toUpperCase() : 'Q'}`\n        } else {\n            promotionFigure = ''\n        }\n    } else {\n        figure = figFrom.toUpperCase()\n        promotionFigure = ''\n        const attacks = attacksOnSq(fen, sqTo, turn)\n        const fig_from_attacks = attacks.filter( sq => fenArray[sq] === figFrom && sq !== sqFrom)\n        if (fig_from_attacks.length === 0) {\n            extrainfo = ''\n        } else {\n            const valids = fig_from_attacks.filter(sq => {\n                const otherfen = tryMove(fen, sq, sqTo, null)\n                return otherfen && validateFen(otherfen).valid\n            })\n            if (valids.length > 1) {\n                extrainfo = sq2san(sqFrom)\n            } else if (valids.length === 1) {\n                if (isSameCol(sqFrom, valids[0])) {\n                    extrainfo = (row(sqFrom) + 1).toString()\n                } else {\n                    extrainfo = col2letter(col(sqFrom))\n                }\n            } else {\n                extrainfo = ''\n            }\n        }\n    }\n    \n    return `${figure}${extrainfo}${capture}${destiny}${promotionFigure}${check}`\n}\n\nconst makeFenComparable = fen => fen.split(/\\s+/).slice(0, 4).join(' ')\n\nclass Chess {\n    constructor(fen = defaultFen) {\n        this.reset(fen)\n    }\n\n    reset(fen = defaultFen) {\n        this.__fens__ = [fen]\n        this.__sans__ = ['']\n    }\n\n    move(...moveArgs) {\n        const fenObj = fen2obj(this.fen) \n        let sqFrom, sqTo, promotion\n        switch (moveArgs.length) {\n            case 0:\n                return false\n            case 1:\n                const result = san2args(this.fen, moveArgs[0])\n                sqFrom = result.sqFrom\n                sqTo = result.sqTo\n                promotion = result.promotion\n                break\n            default:\n                sqFrom = sqNumber(moveArgs[0])\n                sqTo = sqNumber(moveArgs[1])\n                promotion = moveArgs[2]\n        }\n\n        if ((isWhiteFigure(fenObj.fenArray[sqFrom]) && fenObj.turn === 'b') || \n           (isBlackFigure(fenObj.fenArray[sqFrom]) && fenObj.turn === 'w')) return false\n\n        const newFen = tryMove(this.fen, sqFrom, sqTo, promotion)\n        if (!newFen) return false\n        if (!validateFen(newFen).valid) return false\n\n        const san = args2san(this.fen, sqFrom, sqTo, promotion)\n        const { fenArray, turn, enPassant } = fenObj\n        const [figFrom, figTo] = [fenArray[sqFrom], fenArray[sqTo]]\n        let newSanObj = {san, \n                         piece: figFrom, \n                         color: turn, \n                         from: sq2san(sqFrom), \n                         to: sq2san(sqTo)}\n        if (!isEmptyFigure(figTo)) newSanObj = {...newSanObj, captured: figTo}\n        const isEnPassant = /[Pp]/.test(figFrom) && sqTo === san2sq(enPassant)\n        const isBigPawn = /[Pp]/.test(figFrom) && difRow(sqFrom, sqTo) === 2\n        const isPromotion = (figFrom === 'p' && row(sqTo) === 0) ||\n                            (figFrom === 'P' && row(sqTo) === 7)\n        if (isPromotion) newSanObj = {...newSanObj, promotion: promotion ? \n                                      promotion.toUpperCase() : 'Q'}\n        let flags = ''\n        if ((figFrom === 'K' && sqFrom === 4 && sqTo === 6) || (figFrom === 'k' && sqFrom === 60 && sqTo === 62)) {\n            flags += 'k'\n        } else if ((figFrom === 'K' && sqFrom === 4 && sqTo === 2) || (figFrom === 'k' && sqFrom === 60 && sqTo === 58)) {\n            flags += 'q'\n        }\n        if (isPromotion) {\n            flags += 'p'\n        } else if (isBigPawn) {\n            flags += 'b'\n        }\n        flags += isEnPassant ? 'e' : newSanObj.captured ? 'c' : 'n'\n        \n        this.__sans__ = [...this.__sans__, {...newSanObj, flags}]\n        this.__fens__ = [...this.__fens__, newFen]\n\n        setTimeout(() => {\n        }, 0)\n\n        return this\n    }\n\n    history(options) {\n        return (options && options.verbose) ? \n            this.__sans__.slice(1) :\n            this.__sans__.slice(1).map(obj => obj.san)\n    }\n\n    moves(from = null) {\n        return from ? \n            availableMoves(this.fen).filter(it => it.from === sqNumber(from))\n            .map(it => args2san(this.fen, it.from, it.to, 'Q'))\n            :\n            availableMoves(this.fen).map(it => args2san(this.fen, it.from, it.to, 'Q')) \n        }\n\n    in_threefold_repetition() {\n        const current = makeFenComparable(this.fen)\n        const groups = groupArray(this.fens().map(makeFenComparable))\n        return groups[current] >= 3\n    }\n\n    get isCheck() {\n        return isCheck(this.fen)\n    }\n\n    get isCheckMate() {\n        return isCheckMate(this.fen)\n    }\n    \n    get isStaleMate() {\n        return isStaleMate(this.fen)\n    }\n    \n    get fen() {\n        return this.__fens__[this.__fens__.length -1]\n    }\n\n    get isCheck() {\n        return isCheck(this.fen)\n    }\n\n    get isCheckMate() {\n        return isCheckMate(this.fen)\n    }\n\n    get isStaleMate() {\n        return isStaleMate(this.fen)\n    }\n\n    get(sq) {\n        return fen2obj(this.fen).fenArray[sqNumber(sq)]\n    }\n\n    fens() { return this.__fens__}\n\n    undo() {\n        if (this.__fens__.length < 2) return false\n        this.__fens__.splice(this.__fens__.length - 1, this.__fens__.length)\n        this.__sans__.splice(this.__sans__.length - 1, this.__sans__.length)\n        return this\n    }\n\n    toString() {\n        return this.fen\n    }\n}\n\nconst thisExports = {\n    groupArray,\n    makeSet,\n    range,\n\n    sanRegExp,\n    pgnTagLineRegExp,\n\n    defaultFen, \n    sicilianFen,\n    scandinavianFen,\n    oddFrenchFen,\n    mateLocoFen,\n    mateAyudadoFen,\n    prePastorFen,\n    pastorFen,\n\n    makeFenComparable,\n    fen2obj,\n    obj2fen,\n    expandFen,\n    compressFen,\n    fen2array,\n    defaultFenArray,\n    array2fenString,\n    computedFenString,\n    row,\n    col,\n    sq2rowcol,\n    rowcol2sq,\n    col2letter,\n    letter2col,\n    sq2san,\n    san2sq,\n    isBlackFigure,\n    isWhiteFigure,\n    isEmptyFigure,\n    isDarkSquare,\n    isLightSquare,\n    difRow,\n    difCol,\n    isSameRow,\n    isSameCol,\n    isDiagonal,\n    isAntiDiagonal,\n    isKingReach,\n    path,\n    innerPath,\n    isForward,\n    kingSq,\n    isClearPath,\n    isPawnMove,\n    isPawnAttack,\n    isCastling,\n    isKingMove,\n    isBishopMove,\n    isRookMove,\n    isQueenMove,\n    army,\n    wBishops,\n    wKings,\n    wKnights,\n    wPawns,\n    wQueens,\n    wRooks,\n    bBishops,\n    bKings,\n    bKnights,\n    bPawns,\n    bQueens,\n    bRooks,\n    wArmy,\n    bArmy,\n    wAttackers,\n    bAttackers,\n    wAttacks,\n    bAttacks,\n    wPMoves,\n    bPMoves,\n    isFriend,\n    isFoe,\n    getFigure,\n    getFigures,\n    attacksFromSq,\n    attacksOnSq,\n    checksTo,\n    isCheck,\n    isCheckMate,\n    isStaleMate   ,\n    canKingMove,\n    canMove,\n    candidateMoves,\n    availableMoves,\n    validateFen,\n    tryMove,\n    stripSan, \n    args2san,\n    san2args,\n    Chess,\n}\n\nconst cf = thisExports\n\n/*\n\ntry {\n    export default thisExports\n}\ncatch(e) {\n    console.log(`EXPORT (1) ERROR: ${e.message}`)\n}\n\n*/\n\nif (typeof window !== 'undefined') {\n    window.Chess = Chess\n}\n\nif (typeof global !== 'undefined') {\n    global.Chess = Chess\n}\n\ntry {\n    if (typeof module !== 'undefined') {\n        module.exports = Chess\n    } else {\n        const exports = Chess\n    }\n}\ncatch(e) {\n    console.log(`EXPORT (2) ERROR: ${e.message}`)\n}\n\n/*\ntry {\n    if (window) window.base_chess_functions = this.exports\n}\ncatch(e) {\n    console.log(`WINDOW ERROR: ${e.message}`)\n}\n\n*/"]}