{"version":3,"sources":["index.js"],"names":["groupArray","arr","reduce","base","x","makeSet","b","el","find","el2","range","start","end","step","chessboard","sanRegExp","pgnTagLineRegExp","defaultFen","sicilianFen","scandinavianFen","oddFrenchFen","mateLocoFen","mateAyudadoFen","prePastorFen","pastorFen","preWCastlingFen","preBCastlingFen","simpleFen","simpleRookMate","simpleRookCheck","complexRookMate","testFen1","testFen2","fen2obj","fen","split","fenString","turn","castling","enPassant","halfMoveClock","fullMoveNumber","fenArray","fen2array","obj2fen","fenObj","values","join","expandFen","replace","d","repeat","parseInt","compressFen","z","length","toString","test","map","_","i","self","defaultFenArray","array2fenString","v","computedFenString","sq2san","sq","String","fromCharCode","col","row","san2sq","san","rowcol2sq","charCodeAt","sqNumber","isNaN","Math","floor","col2letter","c","letter2col","l","sq2rowcol","r","isBlackFigure","fig","isWhiteFigure","isEmptyFigure","isDarkSquare","constructor","name","isLightSquare","difRow","sq1","sq2","abs","difCol","isSameRow","isSameCol","isDiagonal","isAntiDiagonal","isKnightJump","isKingReach","rowStep","colStep","diagStep","antiDiagStep","path","innerPath","pth","slice","isForward","sqFrom","sqTo","arrayFromFen","kingSq","colour","findIndex","isClearPath","fenArr","iPath","isBishopMove","isRookMove","isQueenMove","isKingMove","isPawnMove","toLowerCase","isPawnAttack","isCastling","army","ret","bPawns","bKnights","bBishops","bRooks","bQueens","bKings","wPawns","wKnights","wBishops","wRooks","wQueens","wKings","wArmy","bArmy","wAttackers","bAttackers","wAttacks","a","attacksFromSq","a1","a2","concat","bAttacks","wPMoves","p","filter","n","canMove","bPMoves","isFriend","fig1","fig2","isFoe","getFigure","getFigures","obj","el1","filterFunc","candidatesArr","attacksOnSq","s","some","s2","checksTo","foe","isCheck","isCheckMate","availableMoves","isStaleMate","isCheckMateOld","friend","kSq","cands","candidateMoves","kingMoves","it","checks","remaining","checkPath","filtered","duo","pair","newFen","tryMove","validateFen","valid","canKingMove","king","pathToCheck","sanSqTo","figOrigen","figDestino","retArr","item","from","to","code","message","promotion","figFrom","figTo","newArray","toUpperCase","stripSan","san2args","fenobj","colOrig","extraInfo","rowOrColFunc","geoInfo","candids","reals","newfen","args2san","figure","extrainfo","capture","destiny","promotionFigure","check","attacks","fig_from_attacks","valids","otherfen","makeFenComparable","Chess","reset","__fens__","__sans__","fens","fennum","sep","ety","result","newSanObj","piece","color","captured","isEnPassant","isBigPawn","isPromotion","flags","setTimeout","options","verbose","current","groups","splice","thisExports","cf","window","global","module","exports","e","console","log"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["\"use strict\";\n\nconst groupArray = arr => {\n    return arr.reduce((base, x) => {\n        if (x in base) {\n            base[x] += 1\n        } else {\n            base[x] = 1\n        }\n        return base\n    }, {})\n}\n\nconst makeSet = arr => arr.reduce((b, el) => b.find(el2 => el2 === el) ? b : [...b, el], [])\n\nconst range = (start = 0, end = 9, step = 1) => {\n    if (start === end) {\n        return [start]\n    }\n\n    if (!step) {\n        if (start < end) {\n            step = 1\n        } else {\n            step = -1\n        }\n    }\n\n    if (start > end && step > 0) {\n        return []\n    }\n\n    if (start < end && step < 0) {\n        return []\n    }\n\n    return [start, ...range(start + step, end, step)]\n}\n\nconst chessboard = range(0, 63)\n\nconst sanRegExp = /(?:(^0-0-0|^O-O-O)|(^0-0|^O-O)|(?:^([a-h])(?:([1-8])|(?:x([a-h][1-8])))(?:=?([NBRQ]))?)|(?:^([NBRQK])([a-h])?([1-8])?(x)?([a-h][1-8])))(?:(\\+)|(#)|(\\+\\+))?$/\nconst pgnTagLineRegExp = /^\\s*\\[\\s*(.+?)\\s+\"(.+?)\"\\s*\\]\\s*$/\n\nconst defaultFen = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\nconst sicilianFen = 'rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq c6 0 1'\nconst scandinavianFen = 'rnbqkbnr/ppp1pppp/8/3p4/4P3/8/PPPP1PPP/RNBQKBNR w KQkq d6 0 2'\nconst oddFrenchFen = 'rnbqkbnr/ppp2ppp/4p3/3pP3/8/8/PPPP1PPP/RNBQKBNR w KQkq d6 0 3'\nconst mateLocoFen = 'rnb1kbnr/pppp1ppp/8/4p3/6Pq/5P2/PPPPP2P/RNBQKBNR w KQkq - 1 3'\nconst mateAyudadoFen = 'r1bqnNnr/pppkpp1p/7R/3p4/8/8/PPPPPPP1/RNBQKBN1 b Q - 0 6'\nconst prePastorFen = 'r1bqkb1r/pppp1ppp/2n2n2/4p2Q/2B1P3/8/PPPP1PPP/RNB1K1NR w KQkq - 4 4'\nconst pastorFen = 'r1bqkb1r/pppp1Qpp/2n2n2/4p3/2B1P3/8/PPPP1PPP/RNB1K1NR b KQkq - 0 4'\nconst preWCastlingFen = 'rnbqk2r/pppp1ppp/5n2/2b1p3/2B1P3/5N2/PPPP1PPP/RNBQK2R w KQkq - 4 4'\nconst preBCastlingFen = 'rnbqk2r/pppp1ppp/5n2/2b1p3/2B1P3/5N2/PPPP1PPP/RNBQ1RK1 b kq - 5 4'\nconst simpleFen = '7k/7P/7K/8/8/8/8/8 w - - 0 1'\nconst simpleRookMate = 'R6k/6pp/8/8/3n4/8/8/7K b - - 0 1'\nconst simpleRookCheck = 'R6k/6pp/8/8/3r4/8/8/7K b - - 0 1'\nconst complexRookMate = 'R6k/6qp/5B2/8/8/8/8/7K b - - 0 1'\nconst testFen1 = '8/6B1/6p1/R6k/7p/8/8/K5R1 b KQkq - 0 1'\nconst testFen2 = '8/5BB1/6p1/R6k/7p/8/8/K5R1 b KQkq - 0 1'\n\nconst fen2obj = fen => {\n    const arr = fen.split(/\\s+/)\n    return {\n        fenString: arr[0],\n        turn: arr[1],\n        castling: arr[2],\n        enPassant: arr[3],\n        halfMoveClock: arr[4],\n        fullMoveNumber: arr[5],\n        fenArray: fen2array(arr[0])\n    }\n}\n\nconst obj2fen = fenObj => {\n    delete fenObj.fenArray\n    return values(fenObj).join(' ')\n}\n\nconst expandFen = fen => fen.replace(/\\//g, '').replace(/[1-8]/g, d => ('0').repeat(parseInt(d)))\n\nconst compressFen = fen => fen.replace(/(.{8})(?!$)/g, \"$1/\").replace(/0+/g, z => z.length.toString())\n\nconst fen2array = fen => {\n    if (/^(.+\\/){7}.+$/.test(fen)) {\n        fen = expandFen(fen)\n    } else if (fen.length !== 64) {\n        return []\n    }\n    return fen.split('').map((_, i, self) => self[i ^ 56])\n}\n\nconst defaultFenArray = fen2array(fen2obj(defaultFen).fenString)\n\nconst array2fenString = arr => compressFen(arr.map((v, i) => arr[i ^56]).join(''))\n\nconst computedFenString = array2fenString(defaultFenArray)\n\nconst sq2san = sq => sq >= 0 && sq < 64 ? \n                     `${String.fromCharCode(97 + col(sq))}${String.fromCharCode(49 + row(sq))}` :\n                     '-'\n\nconst san2sq = san => /[a-h][1-8]/.test(san) ? \n                      rowcol2sq(san.charCodeAt(1) -49, san.charCodeAt(0) - 97) :\n                      -1\n\nconst sqNumber = sq => isNaN(sq) ? san2sq(sq) : parseInt(sq)\n\nconst row = sq => Math.floor(sqNumber(sq) / 8)\n\nconst col = sq => sqNumber(sq) % 8\n\nconst col2letter = c => String.fromCharCode(97 + c)\n\nconst letter2col = l => l.charCodeAt(0) - 97\n\nconst sq2rowcol = sq => ({row: row(sq), col: col(sq)})\n\nconst rowcol2sq = (r, c) => r * 8 + c\n\nconst isBlackFigure = fig => /[pnbrqk]/.test(fig)\n\nconst isWhiteFigure = fig => /[PNBRQK]/.test(fig)\n\nconst isEmptyFigure = fig => fig === '0'\n\nconst isDarkSquare = sq => {\n    if (sq.constructor.name === 'String') {\n        sq = san2sq(sq)\n    }\n    return (row(sq) % 2 === 0 && col(sq) % 2 === 0) || (row(sq) % 2 !== 0 && col(sq) % 2 !== 0)\n}\n\nconst isLightSquare = sq => !isDarkSquare(sq)\n\nconst difRow = (sq1, sq2) => Math.abs(row(sq1) - row(sq2))\n\nconst difCol = (sq1, sq2) => Math.abs(col(sq1) - col(sq2))\n\nconst isSameRow = (sq1, sq2) => difRow(sq1, sq2) === 0\n\nconst isSameCol = (sq1, sq2) => difCol(sq1, sq2) === 0\n\nconst isDiagonal = (sq1, sq2) => difCol(sq1, sq2) === difRow(sq1, sq2)\n\nconst isAntiDiagonal = (sq1, sq2) => difCol(sq1, sq2) === difRow(sq1, sq2) && \n                                     Math.abs(sqNumber(sq1) - sqNumber(sq2)) % 7 === 0 &&\n                                     sqNumber(sq1) !== 63 &&\n                                     sqNumber(sq2) !== 63\n\nconst isKnightJump = (sq1, sq2) => (difCol(sq1, sq2) === 2  && difRow(sq1, sq2) === 1) ||\n                                   (difCol(sq1, sq2) === 1  && difRow(sq1, sq2) === 2) \n\nconst isKingReach = (sq1, sq2) => difCol(sq1, sq2) < 2 && difRow(sq1, sq2) < 2\n\nconst rowStep = 1\nconst colStep = 8\nconst diagStep = 9\nconst antiDiagStep = 7\n\nconst path = (sq1, sq2) => {\n    let step\n    if (sq1 === sq2) {\n        return [sqNumber(sq1)]\n    } else if (isSameCol(sq1, sq2)) {\n        if (sqNumber(sq1) < sqNumber(sq2)) {\n            step = colStep\n        } else {\n            step = -colStep\n        }\n    } else if (isSameRow(sq1, sq2)) {\n        if (sqNumber(sq1) < sqNumber(sq2)) {\n            step = rowStep\n        } else {\n            step = -rowStep\n        }\n    } else if (isAntiDiagonal(sq1, sq2)) {\n        if (sqNumber(sq1) < sqNumber(sq2)) {\n            step = antiDiagStep\n        } else {\n            step = -antiDiagStep\n        }\n    } else if (isDiagonal(sq1, sq2)) {\n        if (sqNumber(sq1) < sqNumber(sq2)) {\n            step = diagStep\n        } else {\n            step = -diagStep\n        }\n    } else if (isKnightJump(sq1, sq2)) {\n        return [sqNumber(sq1), sqNumber(sq2)]\n    } else {\n        return []\n    }\n    return range(sqNumber(sq1), sqNumber(sq2), step)\n}\n\nconst innerPath = pth => pth.slice(1, -1)\n\nconst isForward = (fig, sqFrom, sqTo) => isBlackFigure(fig) ? \n                  row(sqFrom) > row(sqTo) : \n                  row(sqFrom) < row(sqTo)\n\nconst arrayFromFen = fen => {\n    if (fen.constructor.name === 'Array') {\n        return fen\n    } else if (!(fen.constructor.name === 'String')) {\n        return []\n    } else {\n        if (/\\s+/.test(fen)) {\n            return fen2obj(fen).fenArray\n        } else {\n            return fen2array(fen)\n        }\n    }\n}\n\nconst kingSq = (fen, colour) => arrayFromFen(fen).findIndex( x => x === (/[a-z]/.test(colour) && colour !== 'w' ? 'k' : 'K'))\n\nconst isClearPath = (fen, pth) => {\n    if  (pth.length < 3) {\n        return true\n    }\n\n    const fenArr = arrayFromFen(fen)\n    const iPath = innerPath(pth)\n\n    for (let v of iPath) {\n        if (fenArr[v] !== '0') {\n            return false\n        }\n    }\n\n    return true\n}\n\nconst isBishopMove = (sqFrom, sqTo) => isDiagonal(sqFrom, sqTo) && sqFrom !== sqTo\n\nconst isRookMove = (sqFrom, sqTo) => (isSameRow(sqFrom, sqTo) || isSameCol(sqFrom, sqTo)) && sqFrom !== sqTo\n\nconst isQueenMove = (sqFrom, sqTo) => (isBishopMove(sqFrom, sqTo) || isRookMove(sqFrom, sqTo)) && sqFrom !== sqTo\n\nconst isKingMove = (sqFrom, sqTo) => difRow(sqNumber(sqFrom), sqNumber(sqTo)) < 2 &&  \n                                     difCol(sqNumber(sqFrom), sqNumber(sqTo)) < 2 &&\n                                     sqFrom !== sqTo\n\nconst isPawnMove = (sqFrom, sqTo, colour = 'w') => {\n    colour = colour.toLowerCase()\n    if (!/[wb]/.test(colour)) {\n        return false\n    }\n    const fig = colour === 'w' ? 'P' : 'p'\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    if (!isForward(fig, sqFrom, sqTo)) {\n        return 0\n    }\n\n    if (fig === 'P') {\n        if (sqTo === (sqFrom + 8)) return 1\n        if (sqTo === (sqFrom + 16) && row(sqFrom) === 1) return 2\n        return 0\n    } else {\n        if (sqTo === (sqFrom - 8)) return 1\n        if (sqTo === (sqFrom - 16) && row(sqFrom) === 6) return 2\n        return 0\n    }\n}\n\nconst isPawnAttack = (sqFrom, sqTo, colour = 'w') => {\n    colour = colour.toLowerCase()\n    if (!/[wb]/.test(colour)) {\n        return false\n    }\n    const fig = colour === 'w' ? 'P' : 'p'\n    if (!isForward(fig, sqFrom, sqTo)) {\n        return false\n    }\n    if (difCol(sqFrom, sqTo) !== 1) return false\n    if (difRow(sqFrom, sqTo) !== 1) return false\n    return true\n}\n\nconst isCastling = (sqFrom, sqTo, colour = 'w') => {\n    colour = colour.toLowerCase()\n    if (!/[wb]/.test(colour)) {\n        return false\n    }\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    if (colour === 'w') {\n        return sqFrom === 4 && (sqTo === 2 || sqTo === 6)\n    } else {\n        return sqFrom === 60 && (sqTo === 58 || sqTo === 62)\n    }\n}\n\nconst army = (fen, fig) => {\n    const fenArr = fen2array(fen)\n    let ret = []\n    for (let v of chessboard) {\n        if (fenArr[v] === fig) {\n            ret = [...ret, v]\n        }\n    }\n    return ret\n}\n\nconst bPawns = fen => army(fen, 'p')\nconst bKnights = fen => army(fen, 'n')\nconst bBishops = fen => army(fen, 'b')\nconst bRooks = fen => army(fen, 'r')\nconst bQueens = fen => army(fen, 'q')\nconst bKings = fen => army(fen, 'k')\n\nconst wPawns = fen => army(fen, 'P')\nconst wKnights = fen => army(fen, 'N')\nconst wBishops = fen => army(fen, 'B')\nconst wRooks = fen => army(fen, 'R')\nconst wQueens = fen => army(fen, 'Q')\nconst wKings = fen => army(fen, 'K')\n\nconst wArmy = fen => [\n    ...wPawns(fen), \n    ...wKnights(fen), \n    ...wBishops(fen),\n    ...wRooks(fen),\n    ...wQueens(fen),\n    ...wKings(fen),\n]\n\nconst bArmy = fen => [\n    ...bPawns(fen), \n    ...bKnights(fen), \n    ...bBishops(fen),\n    ...bRooks(fen),\n    ...bQueens(fen),\n    ...bKings(fen),\n]\n\nconst wAttackers = fen => [\n    ...wKnights(fen), \n    ...wBishops(fen),\n    ...wRooks(fen),\n    ...wQueens(fen),\n]\n\nconst bAttackers = fen => [\n    ...bKnights(fen), \n    ...bBishops(fen),\n    ...bRooks(fen),\n    ...bQueens(fen),\n]\n\nconst wAttacks = fen => wAttackers(fen).map(a => attacksFromSq(fen, a)).reduce((a1, a2) => a1.concat(a2), [])\nconst bAttacks = fen => bAttackers(fen).map(a => attacksFromSq(fen, a)).reduce((a1, a2) => a1.concat(a2), [])\n\nconst wPMoves = fen => wPawns(fen).map(p => chessboard.filter(n => canMove(fen, p, n)))\n                       .reduce((a1, a2) => a1.concat(a2))   \n\nconst bPMoves = fen => bPawns(fen).map(p => chessboard.filter(n => canMove(fen, p, n)))\n                       .reduce((a1, a2) => a1.concat(a2))   \n\nconst isFriend = (fig1, fig2) => (isBlackFigure(fig1) && isBlackFigure(fig2)) || (isWhiteFigure(fig1) && isWhiteFigure(fig2))\nconst isFoe = (fig1, fig2) => (isBlackFigure(fig1) && isWhiteFigure(fig2)) || (isWhiteFigure(fig1) && isBlackFigure(fig2))\n\nconst getFigure = (fen, sq) => arrayFromFen(fen)[sqNumber(sq)]\n\nconst getFigures = (fen, path) => path.map( n => {\n    const obj = {}\n    obj[n] = getFigure(fen, n)\n    return obj\n}).reduce((el1, el2) => ({...el1, ...el2}), {})\n\nconst attacksFromSq = (fen, sq) => {\n    const fenArr = arrayFromFen(fen)\n    sq = sqNumber(sq)\n    const fig = fenArr[sq]\n    if (isEmptyFigure(fig)) return []\n    let filterFunc\n\n    switch (fig.toLowerCase()) {\n        case 'n':\n            filterFunc = isKnightJump\n            break\n        case 'b':\n            filterFunc = isBishopMove\n            break\n        case 'r':\n            filterFunc = isRookMove\n            break\n        case 'q':\n            filterFunc = isQueenMove\n            break\n        case 'k':\n            filterFunc = isKingMove\n            break\n        default: \n            return fig === 'p' ? [sq - 7, sq - 9] : [sq + 7, sq + 9]\n        }\n\n        const candidatesArr = chessboard.filter( n => filterFunc(sq, n))\n\n        return candidatesArr.filter(n => isClearPath(fenArr, path(sq, n)))\n}\n\nconst attacksOnSq = (fen, sq, colour = 'w') => {\n    colour = colour.toLowerCase()\n    if (!/[wb]/.test(colour)) {\n        return null\n    }\n\n    sq = sqNumber(sq)\n\n    const army = colour === 'w' ? wArmy(fen) : bArmy(fen)\n    // console.log(\"Army:\\n\", army)\n\n    return army.filter(s => attacksFromSq(fen, s).some(s2 => s2 === sq))\n}\n\nconst checksTo = (fen, colour = 'w') => {\n    const foe = colour.toLowerCase() === 'w' ? 'b' : 'w'\n    return attacksOnSq(fen, kingSq(fen, colour.toLowerCase()), foe)\n}\n\nconst isCheck = fen => checksTo(fen, fen2obj(fen).turn).length > 0\n\nconst isCheckMate = fen => isCheck(fen) && availableMoves(fen).length === 0\n\nconst isStaleMate = fen => !isCheck(fen) && availableMoves(fen).length === 0\n\nconst isCheckMateOld = fen => {\n    if (!isCheck(fen)) return false\n    const { turn } = fen2obj(fen)\n    const [friend, foe, kSq] = turn === 'w' ? ['w', 'b', kingSq(fen, 'w')] : ['b', 'w', kingSq(fen, 'b')]\n    const cands = candidateMoves(fen)\n    //console.log(`Candidates: ${JSON.stringify(cands)}`)\n    const kingMoves = cands.find(it => it[0] === kSq)[1]\n    if (kingMoves.length > 0) return false\n    const checks = checksTo(fen, friend)\n    if (checks.length > 1) return true\n    const remaining = cands.filter(it => it[0] !== kSq)\n    //console.log(`Remaining moves: ${JSON.stringify(remaining)}`)\n    const  checkPath = path(checks[0], kSq).filter(n => n !== kSq)\n    //console.log(`Check path: ${JSON.stringify(checkPath)}`)\n    const filtered = remaining.filter( duo => duo[1].some(n => checkPath.find(pth => pth === n)))\n    //console.log(`Filtered: ${JSON.stringify(filtered)}`)\n    if (filtered.length > 0) {\n        for (let pair of filtered) {\n            const newPair = [pair[0], pair[1].filter(v => checkPath.find(n => n === v))]\n            //console.log(`New Pair: ${JSON.stringify(newPair)}`)\n            for (let v of pair[1]) {\n                //console.log(`pair[0]: ${pair[0]} , v: ${v}`)\n                const newFen = tryMove(fen, pair[0], v, 'Q')\n                //console.log(`newFen: ${newFen}`)\n                if (newFen && validateFen(newFen).valid) return false\n            }\n        }\n    }\n\n    return true\n}\n\nconst canKingMove = (fen, sqFrom, sqTo, king) => {\n    const {castling, turn, fenArray} = fen2obj(fen)\n    const friend = king === 'k' ? 'b' : 'w'\n    const foe = king === 'k' ? 'w' : 'b'\n\n    //console.log(`Castling: ${castling}, turn: ${turn}, friend: ${friend}, foe: ${foe}`)\n    if(isKingMove(sqFrom, sqTo)) {\n        return attacksOnSq(fen, sqTo, foe).length === 0\n    } else if (isCastling(sqFrom, sqTo, friend)) {\n        //console.log(`IsCastling: ${sqFrom}, ${sqTo}`)\n        if (!isEmptyFigure(fenArray[sqTo])) {\n            //console.log('Aledgely square ', sqTo, ' is not empty')\n            return false\n        }\n        let pathToCheck\n        switch (sqTo) {\n            case 6:\n                if (!/K/.test(castling)) return false\n                pathToCheck = path(4, 6)\n                break\n            case 2:\n                if (!/Q/.test(castling)) return false\n                pathToCheck = path(4, 2)\n                break\n            case 62:\n                if (!/k/.test(castling)) return false\n                pathToCheck = path(60, 62)\n                break\n            case 58:\n                if (!/q/.test(castling)) return false\n                pathToCheck = path(60, 58)\n                break\n            default:\n                return false\n        }\n        //console.log(\"!pathToCheck.map(s => attacksOnSq(fen, s, foe)).some(a => a.length > 0)\",\n        !pathToCheck.map(s => attacksOnSq(fen, s, foe)).some(a => a.length > 0)\n        return !pathToCheck.map(s => attacksOnSq(fen, s, foe)).some(a => a.length > 0)\n    } else {\n        return false\n    }\n}\n\n\nconst canMove = (fen, sqFrom, sqTo) => {\n    if (path(sqFrom, sqTo).length < 2 ) {\n        return false\n    }\n    if (!isClearPath(fen, path(sqFrom, sqTo))) {\n        return false\n    }\n\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    const sanSqTo = sq2san(sqTo)\n    const fenObj = fen2obj(fen)\n    const {fenArray, enPassant} = fenObj\n    const figOrigen = fenArray[sqFrom]\n\n    if (figOrigen === '0') {\n        return false\n    }\n\n    const figDestino = fenArray[sqTo]\n\n    if (isFriend(figOrigen, figDestino)) {\n        return false\n    }\n\n    switch(figOrigen) {\n        case 'p':\n            //console.log(`Testing move from ${sqFrom} to ${sqTo} for black pawn`)\n            if (isPawnMove(sqFrom, sqTo, 'b') && !isEmptyFigure(figDestino)) return false\n            if (isPawnAttack(sqFrom, sqTo, 'b') && !isWhiteFigure(figDestino) && sanSqTo !== enPassant) return false\n            if (!isPawnMove(sqFrom, sqTo, 'b') && !isPawnAttack(sqFrom, sqTo, 'b')) return false\n            break\n        case 'P':\n            //console.log(`Testing move from ${sqFrom} to ${sqTo} for white pawn`)\n            if (isPawnMove(sqFrom, sqTo, 'w') && !isEmptyFigure(figDestino)) return false\n            if (isPawnAttack(sqFrom, sqTo, 'w') && !isBlackFigure(figDestino) && sanSqTo !== enPassant) return false\n            if (!isPawnMove(sqFrom, sqTo, 'w') && !isPawnAttack(sqFrom, sqTo, 'w')) return false\n            break\n        case 'K':\n        case 'k':\n            return canKingMove(fen, sqFrom, sqTo, figOrigen)\n            break\n        case 'q':\n        case 'Q':\n            if (!isQueenMove(sqFrom, sqTo)) return false\n            break\n        case 'r':\n        case 'R':\n            if (!isRookMove(sqFrom, sqTo)) return false\n            break\n        case 'b':\n        case 'B':\n            if (!isBishopMove(sqFrom, sqTo)) return false\n            break\n        case 'n':\n        case 'N':\n            if (!isKnightJump(sqFrom, sqTo)) return false\n            break\n        default:\n            return false\n    }\n\n    return true\n}\n \nconst candidateMoves = fen => {\n  const {fenArray, turn, castling, enPassant} = fen2obj(fen)\n  const army = turn === 'w' ? wArmy(fen) : bArmy(fen)\n  return army.map(sq => [sq, chessboard.filter(n => canMove(fen, sq, n))])\n}\n\nconst availableMoves = fen => {\n    let retArr = []\n    for (let item of candidateMoves(fen)) {\n        for (let sq of item[1]) {\n            const newFen = tryMove(fen, item[0], sq, 'Q')\n            if (newFen && validateFen(newFen).valid) retArr = [...retArr, {from: item[0], to: sq}]\n        }\n    }\n    return retArr\n}\n\nconst validateFen = fen => {\n    const {fenArray, turn} = fen2obj(fen)\n    if (fenArray.filter(fig => fig === 'k').length !== 1) {\n        return {valid: false, code: 2, message: 'There must be one and only one black king'}\n    }\n    if (fenArray.filter(fig => fig === 'K').length !== 1) {\n        return {valid: false, code: 3, message: 'There must be one and only one white king'}\n    }\n    if (checksTo(fen, turn === 'w' ? 'b' : 'w').length > 0) {\n        return {valid: false, code: 1, message: `The ${turn === 'b' ? 'white' : 'black'} side is in check, while it's not its turn to move`}\n    }\n    return {valid: true, code: 0, message: 'OK'}\n}\n\nconst tryMove = (fen, sqFrom, sqTo, promotion = 'Q') => {\n    if (!fen || fen.constructor.name !== 'String') return false\n    if (!canMove(fen, sqFrom, sqTo)) return false\n    let {fenArray, turn, castling, enPassant, halfMoveClock, fullMoveNumber} = fen2obj(fen)\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    const [figFrom, figTo] = [fenArray[sqFrom], fenArray[sqTo]]\n    let newArray = [...fenArray]\n\n    newArray[sqFrom] = '0'\n    if (figFrom === 'P' && row(sqTo) === 7) {\n        newArray[sqTo] = promotion ? promotion.toUpperCase() : 'Q'\n    } else if (figFrom === 'p' && row(sqTo) === 0) {\n        newArray[sqTo] = promotion ? promotion.toLowerCase() : 'q'\n    } else {\n        newArray[sqTo] = figFrom\n    }\n    if (figFrom === 'P' && sq2san(sqTo) === enPassant) {\n        newArray[sqTo - 8] = '0'\n    } else if (figFrom === 'p' && sq2san(sqTo) === enPassant) {\n        newArray[sqTo + 8] = '0'\n    }\n\n    if (figFrom === 'K' && sqFrom === 4 && sqTo === 6) {\n        newArray[5] = 'R'\n        newArray[7] = '0'\n    } else if (figFrom === 'K' && sqFrom === 4 && sqTo === 2) {\n        newArray[3] = 'R'\n        newArray[0] = '0'\n    } else if (figFrom === 'k' && sqFrom === 60 && sqTo === 62) {\n        newArray[61] = 'r'\n        newArray[63] = '0'\n    } else if (figFrom === 'k' && sqFrom === 60 && sqTo === 58) {\n        newArray[59] = 'r'\n        newArray[56] = '0'\n    }   \n\n    if (sqFrom === 4) castling = castling.replace('K', '').replace('Q', '')\n    if (sqFrom === 60) castling = castling.replace('k', '').replace('q', '')\n\n    if (sqFrom === 7) castling = castling.replace('K', '')\n    if (sqFrom === 0) castling = castling.replace('Q', '')\n\n    if (sqFrom === 63) castling = castling.replace('k', '')\n    if (sqFrom === 56) castling = castling.replace('q', '')\n\n    if (castling === '') castling = '-'\n\n    turn = turn === 'w' ? 'b' : 'w'\n\n    if (figFrom === 'P' && isPawnMove(sqFrom, sqTo, 'w') === 2) {\n        enPassant = sq2san(sqTo - 8)\n    } else if (figFrom === 'p' && isPawnMove(sqFrom, sqTo, 'b') === 2) {\n        enPassant = sq2san(sqTo + 8)\n    } else {\n        enPassant = '-'\n    }\n\n    if (figFrom !== 'P' && figFrom !== 'p' && figTo === '0') {\n        halfMoveClock = parseInt(halfMoveClock) + 1\n    } else {\n        halfMoveClock = '0'\n    }\n\n    fullMoveNumber = turn === 'w' ? parseInt(fullMoveNumber) + 1 : fullMoveNumber\n\n    const fenString = array2fenString(newArray)\n\n    return `${fenString} ${turn} ${castling} ${enPassant} ${halfMoveClock} ${fullMoveNumber}`\n}\n\nconst stripSan = san => san.replace(/[+#=x]/g, '')\n\nconst san2args = (fen, san) => {\n    const fenobj = fen2obj(fen)\n    san = stripSan(san)\n    if (san === '0-0' || san === 'O-O') {\n        if (fenobj.turn === 'w') {\n            return {sqFrom: 4, sqTo: 6, promotion: null}\n        } else {\n            return {sqFrom: 60, sqTo: 62, promotion: null}\n        }\n    }\n\n    if (san === '0-0-0' || san === 'O-O-O') {\n        if (fenobj.turn === 'w') {\n            return {sqFrom: 4, sqTo: 2, promotion: null}\n        } else {\n            return {sqFrom: 60, sqTo: 58, promotion: null}\n        }\n    }\n\n    let sqFrom, sqTo, promotion, army\n\n    if (/[a-h]/.test(san[0])) {\n        const colOrig = letter2col(san[0])\n        if (/[1-8]/.test(san[1])) {\n           sqTo = sqNumber(san.slice(0, 2))\n        } else {\n           sqTo = sqNumber(san.slice(1, 3))\n        }\n        army = fenobj.turn === 'w' ? wPawns(fen) : bPawns(fen) \n        sqFrom = army.find(n => col(n) === colOrig && canMove(fen, n, sqTo)) || -1\n        if (/[QNRBqnrb]/.test(san[san.length - 1])) {\n            promotion = san[san.length - 1]\n        } else {\n            promotion = null\n        }\n        return {sqFrom, sqTo, promotion}\n    } else if (isWhiteFigure(san[0]) && san[0] !== 'P') {\n        promotion = null\n        const fig = san[0]\n        switch (fig) {\n            case 'N':\n                army = fenobj.turn === 'w' ? wKnights(fen) : bKnights(fen)\n                break\n            case 'B':\n                army = fenobj.turn === 'w' ? wBishops(fen) : bBishops(fen)\n                break\n            case 'R':\n                army = fenobj.turn === 'w' ? wRooks(fen) : bRooks(fen)\n                break\n            case 'Q':\n                army = fenobj.turn === 'w' ? wQueens(fen) : bQueens(fen)\n                break\n            case 'K':\n                army = fenobj.turn === 'w' ? wKings(fen) : bKings(fen)\n                break\n            }\n        sqTo = san2sq(san.slice(san.length - 2, san.length))\n        if (san.length === 5) {\n            sqFrom = san2sq(san.slice(1, 3))\n        } else if (san.length === 4) {\n          const extraInfo = san[1]\n          const [rowOrColFunc, geoInfo] = /[1-8]/.test(extraInfo) ? \n                                          [row, parseInt(extraInfo) - 1] : \n                                          [col, letter2col(extraInfo)]\n          sqFrom = army.find(n => rowOrColFunc(n) === geoInfo && canMove(fen, n, sqTo)) || -1\n        } else {\n            const candids = army.filter(n => canMove(fen, n, sqTo))\n            switch (candids.length) {\n                case 0:\n                    sqFrom = -1\n                    break\n                case 1:\n                    sqFrom = candids[0]\n                    break\n                default:\n                    const reals = candids.filter(sq => {\n                        const newfen = tryMove(fen, sq, sqTo, null)\n                        return newfen && validateFen(newfen).valid\n                    })\n                    // console.log(\"Hay \" + reals.length + \" jugada/s para elegir\")\n                    sqFrom  = reals.length === 1 ? reals[0] : -1              \n            } \n        }\n        return {sqFrom, sqTo, promotion}\n    } else {\n        return {sqFrom: -1, sqTo: -1, promotion: null}\n    }\n}\n\nconst args2san = (fen, sqFrom, sqTo, promotion) => {\n    const {fenArray, turn, enPassant, castling} = fen2obj(fen)\n    sqFrom = sqNumber(sqFrom)\n    sqTo = sqNumber(sqTo)\n    const [figFrom, figTo] = [fenArray[sqFrom], fenArray[sqTo]]\n    if (isEmptyFigure(figFrom)) return null\n\n    let figure, extrainfo, capture, destiny, promotionFigure, check\n\n    const newfen = tryMove(fen, sqFrom, sqTo, promotion)\n    if (!(newfen && validateFen(newfen).valid)) return null\n\n    if (isCheckMate(newfen)) {\n        check = '#'\n    } else if (isCheck(newfen)) {\n        check = '+'\n    } else {\n        check = ''\n    }\n\n    if (figFrom === 'K' && sqFrom === 4) {\n        if (sqTo === 6) return `O-O${check}`\n        if (sqTo === 2) return `O-O-O${check}`\n    }\n\n    if (figFrom === 'k' && sqFrom === 60) {\n        if (sqTo === 62) return `O-O${check}`\n        if (sqTo === 58) return `O-O-O${check}`\n    }\n    \n    \n    capture = !isEmptyFigure(figTo) ? 'x' : \n              /[Pp]/.test(figFrom) && sqNumber(enPassant) === sqTo ? 'x' : ''\n    destiny = sq2san(sqTo)\n\n    if (/[Pp]/.test(figFrom)) {\n        figure =  isSameCol(sqFrom, sqTo) ?  '' : col2letter(col(sqFrom))\n        extrainfo = ''\n        if ((row(sqTo) === 7 && figFrom === 'P') || \n           (row(sqTo) === 7 && figFrom === 'P')) {\n            promotionFigure = `=${promotion ? promotion.toUpperCase() : 'Q'}`\n        } else {\n            promotionFigure = ''\n        }\n    } else {\n        figure = figFrom.toUpperCase()\n        promotionFigure = ''\n        const attacks = attacksOnSq(fen, sqTo, turn)\n        const fig_from_attacks = attacks.filter( sq => fenArray[sq] === figFrom && sq !== sqFrom)\n        if (fig_from_attacks.length === 0) {\n            extrainfo = ''\n        } else {\n            const valids = fig_from_attacks.filter(sq => {\n                const otherfen = tryMove(fen, sq, sqTo, null)\n                return otherfen && validateFen(otherfen).valid\n            })\n            if (valids.length > 1) {\n                extrainfo = sq2san(sqFrom)\n            } else if (valids.length === 1) {\n                if (isSameCol(sqFrom, valids[0])) {\n                    extrainfo = (row(sqFrom) + 1).toString()\n                } else {\n                    extrainfo = col2letter(col(sqFrom))\n                }\n            } else {\n                extrainfo = ''\n            }\n        }\n    }\n    \n    return `${figure}${extrainfo}${capture}${destiny}${promotionFigure}${check}`\n}\n\nconst makeFenComparable = fen => fen.split(/\\s+/).slice(0, 4).join(' ')\n\nclass Chess {\n    constructor(fen = defaultFen) {\n        this.reset(fen)\n    }\n\n    reset(fen = defaultFen) {\n        this.__fens__ = [fen]\n        this.__sans__ = ['']\n    }\n\n    ascii(fennum = this.fens().length - 1, flipped = false) {\n        const sep = `   +${'-'.repeat(24)}+\\n`\n        const ety = `   |${' '.repeat(24)}|\\n`\n        return `${sep}${ety}`\n    }\n\n    move(...moveArgs) {\n        const fenObj = fen2obj(this.fen) \n        let sqFrom, sqTo, promotion\n        switch (moveArgs.length) {\n            case 0:\n                return false\n            case 1:\n                const result = san2args(this.fen, moveArgs[0])\n                sqFrom = result.sqFrom\n                sqTo = result.sqTo\n                promotion = result.promotion\n                break\n            default:\n                sqFrom = sqNumber(moveArgs[0])\n                sqTo = sqNumber(moveArgs[1])\n                promotion = moveArgs[2]\n        }\n\n        if ((isWhiteFigure(fenObj.fenArray[sqFrom]) && fenObj.turn === 'b') || \n           (isBlackFigure(fenObj.fenArray[sqFrom]) && fenObj.turn === 'w')) return false\n\n        const newFen = tryMove(this.fen, sqFrom, sqTo, promotion)\n        if (!newFen) return false\n        if (!validateFen(newFen).valid) return false\n\n        const san = args2san(this.fen, sqFrom, sqTo, promotion)\n        const { fenArray, turn, enPassant } = fenObj\n        const [figFrom, figTo] = [fenArray[sqFrom], fenArray[sqTo]]\n        let newSanObj = {san, \n                         piece: figFrom, \n                         color: turn, \n                         from: sq2san(sqFrom), \n                         to: sq2san(sqTo)}\n        if (!isEmptyFigure(figTo)) newSanObj = {...newSanObj, captured: figTo}\n        const isEnPassant = /[Pp]/.test(figFrom) && sqTo === san2sq(enPassant)\n        const isBigPawn = /[Pp]/.test(figFrom) && difRow(sqFrom, sqTo) === 2\n        const isPromotion = (figFrom === 'p' && row(sqTo) === 0) ||\n                            (figFrom === 'P' && row(sqTo) === 7)\n        if (isPromotion) newSanObj = {...newSanObj, promotion: promotion ? \n                                      promotion.toUpperCase() : 'Q'}\n        let flags = ''\n        if ((figFrom === 'K' && sqFrom === 4 && sqTo === 6) || (figFrom === 'k' && sqFrom === 60 && sqTo === 62)) {\n            flags += 'k'\n        } else if ((figFrom === 'K' && sqFrom === 4 && sqTo === 2) || (figFrom === 'k' && sqFrom === 60 && sqTo === 58)) {\n            flags += 'q'\n        }\n        if (isPromotion) {\n            flags += 'p'\n        } else if (isBigPawn) {\n            flags += 'b'\n        }\n        flags += isEnPassant ? 'e' : newSanObj.captured ? 'c' : 'n'\n        \n        this.__sans__ = [...this.__sans__, {...newSanObj, flags}]\n        this.__fens__ = [...this.__fens__, newFen]\n\n        setTimeout(() => {\n        }, 0)\n\n        return this\n    }\n\n    history(options) {\n        return (options && options.verbose) ? \n            this.__sans__.slice(1) :\n            this.__sans__.slice(1).map(obj => obj.san)\n    }\n\n    moves(from = null) {\n        return from ? \n            availableMoves(this.fen).filter(it => it.from === sqNumber(from))\n            .map(it => args2san(this.fen, it.from, it.to, 'Q'))\n            :\n            availableMoves(this.fen).map(it => args2san(this.fen, it.from, it.to, 'Q')) \n        }\n\n    in_threefold_repetition() {\n        const current = makeFenComparable(this.fen)\n        const groups = groupArray(this.fens().map(makeFenComparable))\n        return groups[current] >= 3\n    }\n\n    get isCheck() {\n        return isCheck(this.fen)\n    }\n\n    get isCheckMate() {\n        return isCheckMate(this.fen)\n    }\n    \n    get isStaleMate() {\n        return isStaleMate(this.fen)\n    }\n    \n    get fen() {\n        return this.__fens__[this.__fens__.length -1]\n    }\n\n    get isCheck() {\n        return isCheck(this.fen)\n    }\n\n    get isCheckMate() {\n        return isCheckMate(this.fen)\n    }\n\n    get isStaleMate() {\n        return isStaleMate(this.fen)\n    }\n\n    get(sq) {\n        return fen2obj(this.fen).fenArray[sqNumber(sq)]\n    }\n\n    fens() { return this.__fens__}\n\n    undo() {\n        if (this.__fens__.length < 2) return false\n        this.__fens__.splice(this.__fens__.length - 1, this.__fens__.length)\n        this.__sans__.splice(this.__sans__.length - 1, this.__sans__.length)\n        return this\n    }\n\n    toString() {\n        return this.fen\n    }\n}\n\nconst thisExports = {\n    groupArray,\n    makeSet,\n    range,\n\n    sanRegExp,\n    pgnTagLineRegExp,\n\n    defaultFen, \n    sicilianFen,\n    scandinavianFen,\n    oddFrenchFen,\n    mateLocoFen,\n    mateAyudadoFen,\n    prePastorFen,\n    pastorFen,\n\n    makeFenComparable,\n    fen2obj,\n    obj2fen,\n    expandFen,\n    compressFen,\n    fen2array,\n    defaultFenArray,\n    array2fenString,\n    computedFenString,\n    row,\n    col,\n    sq2rowcol,\n    rowcol2sq,\n    col2letter,\n    letter2col,\n    sq2san,\n    san2sq,\n    isBlackFigure,\n    isWhiteFigure,\n    isEmptyFigure,\n    isDarkSquare,\n    isLightSquare,\n    difRow,\n    difCol,\n    isSameRow,\n    isSameCol,\n    isDiagonal,\n    isAntiDiagonal,\n    isKingReach,\n    path,\n    innerPath,\n    isForward,\n    kingSq,\n    isClearPath,\n    isPawnMove,\n    isPawnAttack,\n    isCastling,\n    isKingMove,\n    isBishopMove,\n    isRookMove,\n    isQueenMove,\n    army,\n    wBishops,\n    wKings,\n    wKnights,\n    wPawns,\n    wQueens,\n    wRooks,\n    bBishops,\n    bKings,\n    bKnights,\n    bPawns,\n    bQueens,\n    bRooks,\n    wArmy,\n    bArmy,\n    wAttackers,\n    bAttackers,\n    wAttacks,\n    bAttacks,\n    wPMoves,\n    bPMoves,\n    isFriend,\n    isFoe,\n    getFigure,\n    getFigures,\n    attacksFromSq,\n    attacksOnSq,\n    checksTo,\n    isCheck,\n    isCheckMate,\n    isStaleMate   ,\n    canKingMove,\n    canMove,\n    candidateMoves,\n    availableMoves,\n    validateFen,\n    tryMove,\n    stripSan, \n    args2san,\n    san2args,\n    Chess,\n}\n\nconst cf = thisExports\n\n/*\n\ntry {\n    export default thisExports\n}\ncatch(e) {\n    console.log(`EXPORT (1) ERROR: ${e.message}`)\n}\n\n*/\n\nif (typeof window !== 'undefined') {\n    window.Chess = Chess\n}\n\nif (typeof global !== 'undefined') {\n    global.Chess = Chess\n}\n\ntry {\n    if (typeof module !== 'undefined') {\n        module.exports = Chess\n    } else {\n        const exports = Chess\n    }\n}\ncatch(e) {\n    console.log(`EXPORT (2) ERROR: ${e.message}`)\n}\n\n/*\ntry {\n    if (window) window.base_chess_functions = this.exports\n}\ncatch(e) {\n    console.log(`WINDOW ERROR: ${e.message}`)\n}\n\n*/"]}